# Generated by Haxe 4.0.5
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import random as python_lib_Random


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e = _hx_e1
            base = 10
            _hx_len = len(x)
            foundCount = 0
            sign = 0
            firstDigitIndex = 0
            lastDigitIndex = -1
            previous = 0
            _g = 0
            _g1 = _hx_len
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                c = (-1 if ((i >= len(x))) else ord(x[i]))
                if (((c > 8) and ((c < 14))) or ((c == 32))):
                    if (foundCount > 0):
                        return None
                    continue
                else:
                    c1 = c
                    if (c1 == 43):
                        if (foundCount == 0):
                            sign = 1
                        elif (not (((48 <= c) and ((c <= 57))))):
                            if (not (((base == 16) and ((((97 <= c) and ((c <= 122))) or (((65 <= c) and ((c <= 90))))))))):
                                break
                    elif (c1 == 45):
                        if (foundCount == 0):
                            sign = -1
                        elif (not (((48 <= c) and ((c <= 57))))):
                            if (not (((base == 16) and ((((97 <= c) and ((c <= 122))) or (((65 <= c) and ((c <= 90))))))))):
                                break
                    elif (c1 == 48):
                        if (not (((foundCount == 0) or (((foundCount == 1) and ((sign != 0))))))):
                            if (not (((48 <= c) and ((c <= 57))))):
                                if (not (((base == 16) and ((((97 <= c) and ((c <= 122))) or (((65 <= c) and ((c <= 90))))))))):
                                    break
                    elif ((c1 == 120) or ((c1 == 88))):
                        if ((previous == 48) and ((((foundCount == 1) and ((sign == 0))) or (((foundCount == 2) and ((sign != 0))))))):
                            base = 16
                        elif (not (((48 <= c) and ((c <= 57))))):
                            if (not (((base == 16) and ((((97 <= c) and ((c <= 122))) or (((65 <= c) and ((c <= 90))))))))):
                                break
                    elif (not (((48 <= c) and ((c <= 57))))):
                        if (not (((base == 16) and ((((97 <= c) and ((c <= 122))) or (((65 <= c) and ((c <= 90))))))))):
                            break
                if (((foundCount == 0) and ((sign == 0))) or (((foundCount == 1) and ((sign != 0))))):
                    firstDigitIndex = i
                foundCount = (foundCount + 1)
                lastDigitIndex = i
                previous = c
            if (firstDigitIndex <= lastDigitIndex):
                digits = HxString.substring(x,firstDigitIndex,(lastDigitIndex + 1))
                try:
                    return (((-1 if ((sign == -1)) else 1)) * int(digits,base))
                except Exception as _hx_e:
                    _hx_e1 = _hx_e
                    e1 = _hx_e1
                    return None
            return None

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g = 0
        _g1 = len(x)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g3 = _g2
                if (((((((((((_g3 == 57) or ((_g3 == 56))) or ((_g3 == 55))) or ((_g3 == 54))) or ((_g3 == 53))) or ((_g3 == 52))) or ((_g3 == 51))) or ((_g3 == 50))) or ((_g3 == 49))) or ((_g3 == 48))) or ((_g3 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has



class geometryxd_AM:
    _hx_class_name = "geometryxd.AM"
    __slots__ = ()
    _hx_statics = ["positive_inside_I", "zero_inside_I", "negative_inside_I", "positive_inside_F", "zero_inside_F", "negative_inside_F", "same_size_I", "same_size_F", "same_xI", "same_xF", "sum_I", "sum_F", "diff_I", "diff_F", "middle_F", "multiply_I_I", "multiply_F_F", "multiply_I", "multiply_F", "minus_I", "minus_F", "sum_xI", "sum_xF", "diff_xI", "diff_xF", "middle_xF", "multiply_xI_I", "multiply_xF_F", "multiply_xI", "multiply_xF", "multisum_xI", "multisum_xF", "sum_previous_I", "diff_previous_I", "sum_before_I", "diff_before_I", "sum_previous_F", "diff_previous_F", "sum_before_F", "diff_before_F", "recounter_I_F", "recounter_F_I", "recounter_I_S", "recounter_F_S", "recounter_S_I", "recounter_S_F", "repeater_F_F", "repeater_I_I", "repeater_S_S", "repeater_F_I", "repeater_S_I", "repeater_I_F", "repeater_S_F", "repeater_I_S", "repeater_F_S", "an_in_b_S", "an_in_bn_S", "an_in_b_I", "an_in_bn_I", "an_in_b_F", "an_in_bn_F", "chain_S", "chain_I", "chain_F", "maxabs"]

    def __init__(self):
        print("array manipulation is ready for use")

    @staticmethod
    def positive_inside_I(a):
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i > 0):
                return True
        return False

    @staticmethod
    def zero_inside_I(a):
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i == 0):
                return True
        return False

    @staticmethod
    def negative_inside_I(a):
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i < 0):
                return True
        return False

    @staticmethod
    def positive_inside_F(a):
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i > 0):
                return True
        return False

    @staticmethod
    def zero_inside_F(a):
        rez = False
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i == 0):
                rez = True
        return rez

    @staticmethod
    def negative_inside_F(a):
        rez = False
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (i < 0):
                rez = True
        return rez

    @staticmethod
    def same_size_I(a):
        rez = None
        al = len(a)
        if (al > 1):
            rez = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez = False
                    break
        else:
            rez = True
        return rez

    @staticmethod
    def same_size_F(a):
        rez = None
        al = len(a)
        if (al > 1):
            rez = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez = False
        else:
            rez = True
        return rez

    @staticmethod
    def same_xI(a):
        rez = None
        al = len(a)
        tmp = None
        if (al > 0):
            rez1 = None
            al1 = len(a)
            if (al1 > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al1
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
                        break
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            rez = True
            lv = len((a[0] if 0 < len(a) else None))
            _g2 = 1
            _g11 = al
            while (_g2 < _g11):
                i1 = _g2
                _g2 = (_g2 + 1)
                _g3 = 0
                _g12 = lv
                while (_g3 < _g12):
                    j = _g3
                    _g3 = (_g3 + 1)
                    if rez:
                        if (python_internal_ArrayImpl._get((a[0] if 0 < len(a) else None), j) != python_internal_ArrayImpl._get((a[i1] if i1 >= 0 and i1 < len(a) else None), j)):
                            rez = False
                    else:
                        break
                if (not rez):
                    break
        return rez

    @staticmethod
    def same_xF(a):
        rez = None
        al = len(a)
        tmp = None
        if (al > 0):
            rez1 = None
            al1 = len(a)
            if (al1 > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al1
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            rez = True
            lv = len((a[0] if 0 < len(a) else None))
            _g2 = 1
            _g11 = al
            while (_g2 < _g11):
                i1 = _g2
                _g2 = (_g2 + 1)
                _g3 = 0
                _g12 = lv
                while (_g3 < _g12):
                    j = _g3
                    _g3 = (_g3 + 1)
                    if rez:
                        if (python_internal_ArrayImpl._get((a[0] if 0 < len(a) else None), j) != python_internal_ArrayImpl._get((a[i1] if i1 >= 0 and i1 < len(a) else None), j)):
                            rez = False
                    else:
                        break
                if (not rez):
                    break
        return rez

    @staticmethod
    def sum_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = 0
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                rez = (rez + (a[i] if i >= 0 and i < len(a) else None))
        return rez

    @staticmethod
    def sum_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = 0
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                rez = (rez + (a[i] if i >= 0 and i < len(a) else None))
        return rez

    @staticmethod
    def diff_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            if (al == 1):
                rez = (a[0] if 0 < len(a) else None)
            else:
                a1 = (a[0] if 0 < len(a) else None)
                _g = []
                _g1 = 1
                _g2 = al
                while (_g1 < _g2):
                    i = _g1
                    _g1 = (_g1 + 1)
                    _g.append((a[i] if i >= 0 and i < len(a) else None))
                a2 = _g
                rez1 = None
                al1 = len(a2)
                if (al1 > 0):
                    rez1 = 0
                    _g3 = 0
                    _g11 = al1
                    while (_g3 < _g11):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        rez1 = (rez1 + (a2[i1] if i1 >= 0 and i1 < len(a2) else None))
                rez = (a1 - rez1)
        return rez

    @staticmethod
    def diff_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            if (al == 1):
                rez = (a[0] if 0 < len(a) else None)
            else:
                a1 = (a[0] if 0 < len(a) else None)
                _g = []
                _g1 = 1
                _g2 = al
                while (_g1 < _g2):
                    i = _g1
                    _g1 = (_g1 + 1)
                    _g.append((a[i] if i >= 0 and i < len(a) else None))
                a2 = _g
                rez1 = None
                al1 = len(a2)
                if (al1 > 0):
                    rez1 = 0
                    _g3 = 0
                    _g11 = al1
                    while (_g3 < _g11):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        rez1 = (rez1 + (a2[i1] if i1 >= 0 and i1 < len(a2) else None))
                rez = (a1 - rez1)
        return rez

    @staticmethod
    def middle_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez1 = None
            al1 = len(a)
            if (al1 > 0):
                rez1 = 0
                _g = 0
                _g1 = al1
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    rez1 = (rez1 + (a[i] if i >= 0 and i < len(a) else None))
            rez = (rez1 / al)
        return rez

    @staticmethod
    def multiply_I_I(a,n):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) * n))
            rez = _g
        return rez

    @staticmethod
    def multiply_F_F(a,n):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) * n))
            rez = _g
        return rez

    @staticmethod
    def multiply_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = (a[0] if 0 < len(a) else None)
            if (al > 1):
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    rez = (rez * (a[i] if i >= 0 and i < len(a) else None))
        return rez

    @staticmethod
    def multiply_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = (a[0] if 0 < len(a) else None)
            if (al > 1):
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    rez = (rez * (a[i] if i >= 0 and i < len(a) else None))
        return rez

    @staticmethod
    def minus_I(a):
        _g = []
        _g1 = 0
        _g2 = len(a)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g

    @staticmethod
    def minus_F(a):
        _g = []
        _g1 = 0
        _g2 = len(a)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g

    @staticmethod
    def sum_xI(a):
        rez = None
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
                    break
        else:
            rez1 = True
        if rez1:
            _g2 = []
            _g11 = 0
            _g21 = len((a[0] if 0 < len(a) else None))
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g12 = []
                _g22 = 0
                _g3 = len(a)
                while (_g22 < _g3):
                    ai = _g22
                    _g22 = (_g22 + 1)
                    _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                a1 = _g12
                rez2 = None
                al1 = len(a1)
                if (al1 > 0):
                    rez2 = 0
                    _g4 = 0
                    _g13 = al1
                    while (_g4 < _g13):
                        i2 = _g4
                        _g4 = (_g4 + 1)
                        rez2 = (rez2 + (a1[i2] if i2 >= 0 and i2 < len(a1) else None))
                _g2.append(rez2)
            rez = _g2
        return rez

    @staticmethod
    def sum_xF(a):
        rez = None
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
        else:
            rez1 = True
        if rez1:
            _g2 = []
            _g11 = 0
            _g21 = len((a[0] if 0 < len(a) else None))
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g12 = []
                _g22 = 0
                _g3 = len(a)
                while (_g22 < _g3):
                    ai = _g22
                    _g22 = (_g22 + 1)
                    _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                a1 = _g12
                rez2 = None
                al1 = len(a1)
                if (al1 > 0):
                    rez2 = 0
                    _g4 = 0
                    _g13 = al1
                    while (_g4 < _g13):
                        i2 = _g4
                        _g4 = (_g4 + 1)
                        rez2 = (rez2 + (a1[i2] if i2 >= 0 and i2 < len(a1) else None))
                _g2.append(rez2)
            rez = _g2
        return rez

    @staticmethod
    def diff_xI(a):
        rez = None
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
                    break
        else:
            rez1 = True
        if rez1:
            _g2 = []
            _g11 = 0
            _g21 = len((a[0] if 0 < len(a) else None))
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g12 = []
                _g22 = 0
                _g3 = len(a)
                while (_g22 < _g3):
                    ai = _g22
                    _g22 = (_g22 + 1)
                    _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                x = geometryxd_AM.diff_I(_g12)
                _g2.append(x)
            rez = _g2
        return rez

    @staticmethod
    def diff_xF(a):
        rez = None
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
        else:
            rez1 = True
        if rez1:
            _g2 = []
            _g11 = 0
            _g21 = len((a[0] if 0 < len(a) else None))
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g12 = []
                _g22 = 0
                _g3 = len(a)
                while (_g22 < _g3):
                    ai = _g22
                    _g22 = (_g22 + 1)
                    _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                x = geometryxd_AM.diff_F(_g12)
                _g2.append(x)
            rez = _g2
        return rez

    @staticmethod
    def middle_xF(a):
        rez = None
        tmp = None
        if (len((a[0] if 0 < len(a) else None)) > 0):
            rez1 = None
            al = len(a)
            if (al > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = 0
            _g21 = len((a[0] if 0 < len(a) else None))
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g12 = []
                _g22 = 0
                _g3 = len(a)
                while (_g22 < _g3):
                    ai = _g22
                    _g22 = (_g22 + 1)
                    _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                x = geometryxd_AM.middle_F(_g12)
                _g2.append(x)
            rez = _g2
        return rez

    @staticmethod
    def multiply_xI_I(a,n):
        rez = None
        if (len(a) > 0):
            _g = []
            _g1 = 0
            _g2 = len(a)
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                a1 = (a[i] if i >= 0 and i < len(a) else None)
                rez1 = None
                al = len(a1)
                if (al > 0):
                    _g3 = []
                    _g11 = 0
                    _g21 = al
                    while (_g11 < _g21):
                        i1 = _g11
                        _g11 = (_g11 + 1)
                        _g3.append(((a1[i1] if i1 >= 0 and i1 < len(a1) else None) * n))
                    rez1 = _g3
                _g.append(rez1)
            rez = _g
        return rez

    @staticmethod
    def multiply_xF_F(a,n):
        rez = None
        if (len(a) > 0):
            _g = []
            _g1 = 0
            _g2 = len(a)
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                a1 = (a[i] if i >= 0 and i < len(a) else None)
                rez1 = None
                al = len(a1)
                if (al > 0):
                    _g3 = []
                    _g11 = 0
                    _g21 = al
                    while (_g11 < _g21):
                        i1 = _g11
                        _g11 = (_g11 + 1)
                        _g3.append(((a1[i1] if i1 >= 0 and i1 < len(a1) else None) * n))
                    rez1 = _g3
                _g.append(rez1)
            rez = _g
        return rez

    @staticmethod
    def multiply_xI(a):
        rez = None
        al = len(a)
        rez1 = None
        al1 = len(a)
        if (al1 > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al1
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
                    break
        else:
            rez1 = True
        if rez1:
            if (al > 1):
                _g2 = []
                _g11 = 0
                _g21 = len((a[0] if 0 < len(a) else None))
                while (_g11 < _g21):
                    i1 = _g11
                    _g11 = (_g11 + 1)
                    _g12 = []
                    _g22 = 0
                    _g3 = len(a)
                    while (_g22 < _g3):
                        ai = _g22
                        _g22 = (_g22 + 1)
                        _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                    a1 = _g12
                    rez2 = None
                    al2 = len(a1)
                    if (al2 > 0):
                        rez2 = (a1[0] if 0 < len(a1) else None)
                        if (al2 > 1):
                            _g4 = 1
                            _g13 = al2
                            while (_g4 < _g13):
                                i2 = _g4
                                _g4 = (_g4 + 1)
                                rez2 = (rez2 * (a1[i2] if i2 >= 0 and i2 < len(a1) else None))
                    _g2.append(rez2)
                rez = _g2
            elif (al > 0):
                rez = (a[0] if 0 < len(a) else None)
        return rez

    @staticmethod
    def multiply_xF(a):
        rez = None
        al = len(a)
        rez1 = None
        al1 = len(a)
        if (al1 > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al1
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
        else:
            rez1 = True
        if rez1:
            if (al > 1):
                _g2 = []
                _g11 = 0
                _g21 = len((a[0] if 0 < len(a) else None))
                while (_g11 < _g21):
                    i1 = _g11
                    _g11 = (_g11 + 1)
                    _g12 = []
                    _g22 = 0
                    _g3 = len(a)
                    while (_g22 < _g3):
                        ai = _g22
                        _g22 = (_g22 + 1)
                        _g12.append(python_internal_ArrayImpl._get((a[ai] if ai >= 0 and ai < len(a) else None), i1))
                    a1 = _g12
                    rez2 = None
                    al2 = len(a1)
                    if (al2 > 0):
                        rez2 = (a1[0] if 0 < len(a1) else None)
                        if (al2 > 1):
                            _g4 = 1
                            _g13 = al2
                            while (_g4 < _g13):
                                i2 = _g4
                                _g4 = (_g4 + 1)
                                rez2 = (rez2 * (a1[i2] if i2 >= 0 and i2 < len(a1) else None))
                    _g2.append(rez2)
                rez = _g2
            elif (al > 0):
                rez = (a[0] if 0 < len(a) else None)
        return rez

    @staticmethod
    def multisum_xI(a):
        rez = None
        tmp = None
        if ((len(a) > 1) and ((len((a[0] if 0 < len(a) else None)) > 0))):
            rez1 = None
            al = len(a)
            if (al > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
                        break
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            a1 = geometryxd_AM.multiply_xI(a)
            rez2 = None
            al1 = len(a1)
            if (al1 > 0):
                rez2 = 0
                _g2 = 0
                _g11 = al1
                while (_g2 < _g11):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    rez2 = (rez2 + (a1[i1] if i1 >= 0 and i1 < len(a1) else None))
            rez = rez2
        return rez

    @staticmethod
    def multisum_xF(a):
        rez = None
        tmp = None
        if ((len(a) > 1) and ((len((a[0] if 0 < len(a) else None)) > 0))):
            rez1 = None
            al = len(a)
            if (al > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            a1 = geometryxd_AM.multiply_xF(a)
            rez2 = None
            al1 = len(a1)
            if (al1 > 0):
                rez2 = 0
                _g2 = 0
                _g11 = al1
                while (_g2 < _g11):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    rez2 = (rez2 + (a1[i1] if i1 >= 0 and i1 < len(a1) else None))
            rez = rez2
        return rez

    @staticmethod
    def sum_previous_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) + python_internal_ArrayImpl._get(a, (i - 1)))))
            rez = _g
        return rez

    @staticmethod
    def diff_previous_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1)))))
            rez = _g
        return rez

    @staticmethod
    def sum_before_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = [0]
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                x = (python_internal_ArrayImpl._get(rez, (len(rez) - 1)) + (a[i] if i >= 0 and i < len(a) else None))
                rez.append(x)
            if (len(rez) != 0):
                rez.pop(0)
        return rez

    @staticmethod
    def diff_before_I(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = [0]
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                x = ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(rez, (len(rez) - 1)))
                rez.append(x)
            if (len(rez) != 0):
                rez.pop(0)
        return rez

    @staticmethod
    def sum_previous_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) + python_internal_ArrayImpl._get(a, (i - 1)))))
            rez = _g
        return rez

    @staticmethod
    def diff_previous_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            _g = []
            _g1 = 0
            _g2 = al
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((a[i] if i >= 0 and i < len(a) else None) if ((i == 0)) else ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(a, (i - 1)))))
            rez = _g
        return rez

    @staticmethod
    def sum_before_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = [0]
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                x = (python_internal_ArrayImpl._get(rez, (len(rez) - 1)) + (a[i] if i >= 0 and i < len(a) else None))
                rez.append(x)
            if (len(rez) != 0):
                rez.pop(0)
        return rez

    @staticmethod
    def diff_before_F(a):
        rez = None
        al = len(a)
        if (al > 0):
            rez = [0]
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                x = ((a[i] if i >= 0 and i < len(a) else None) - python_internal_ArrayImpl._get(rez, (len(rez) - 1)))
                rez.append(x)
            if (len(rez) != 0):
                rez.pop(0)
        return rez

    @staticmethod
    def recounter_I_F(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            rez.append((what[i] if i >= 0 and i < len(what) else None))
        return rez

    @staticmethod
    def recounter_F_I(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = None
            try:
                x = int((what[i] if i >= 0 and i < len(what) else None))
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                x = None
            rez.append(x)
        return rez

    @staticmethod
    def recounter_I_S(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.string((what[i] if i >= 0 and i < len(what) else None))
            rez.append(x)
        return rez

    @staticmethod
    def recounter_F_S(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.string((what[i] if i >= 0 and i < len(what) else None))
            rez.append(x)
        return rez

    @staticmethod
    def recounter_S_I(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.parseInt((what[i] if i >= 0 and i < len(what) else None))
            rez.append(x)
        return rez

    @staticmethod
    def recounter_S_F(what):
        rez = []
        _g = 0
        _g1 = len(what)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.parseFloat((what[i] if i >= 0 and i < len(what) else None))
            rez.append(x)
        return rez

    @staticmethod
    def repeater_F_F(n,what,full = None):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g1 = 0
        _g2 = ind
        while (_g1 < _g2):
            _ = _g1
            _g1 = (_g1 + 1)
            _g11 = 0
            _g21 = wl
            while (_g11 < _g21):
                i = _g11
                _g11 = (_g11 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i1 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i1] if i1 >= 0 and i1 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_I_I(n,what,full = None):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g1 = 0
        _g2 = ind
        while (_g1 < _g2):
            _ = _g1
            _g1 = (_g1 + 1)
            _g11 = 0
            _g21 = wl
            while (_g11 < _g21):
                i = _g11
                _g11 = (_g11 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i1 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i1] if i1 >= 0 and i1 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_S_S(n,what,full = None):
        if (full is None):
            full = False
        rez = None
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g = []
        _g1 = 0
        _g2 = ind
        while (_g1 < _g2):
            _ = _g1
            _g1 = (_g1 + 1)
            _g11 = 0
            _g21 = wl
            while (_g11 < _g21):
                i = _g11
                _g11 = (_g11 + 1)
                _g.append((what[i] if i >= 0 and i < len(what) else None))
        rez = _g
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i1 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i1] if i1 >= 0 and i1 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_F_I(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = None
            try:
                x = int((what_[i] if i >= 0 and i < len(what_) else None))
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                x = None
            rez1.append(x)
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x1 = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e1 = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_S_I(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.parseInt((what_[i] if i >= 0 and i < len(what_) else None))
            rez1.append(x)
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x1 = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_I_F(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            rez1.append((what_[i] if i >= 0 and i < len(what_) else None))
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_S_F(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.parseFloat((what_[i] if i >= 0 and i < len(what_) else None))
            rez1.append(x)
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x1 = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_I_S(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.string((what_[i] if i >= 0 and i < len(what_) else None))
            rez1.append(x)
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x1 = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def repeater_F_S(n,what_,full = None):
        if (full is None):
            full = False
        rez = None
        rez1 = []
        _g = 0
        _g1 = len(what_)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = Std.string((what_[i] if i >= 0 and i < len(what_) else None))
            rez1.append(x)
        what = rez1
        if (n == 0):
            return rez
        wl = len(what)
        rez = []
        if (wl == 0):
            return rez
        if (n < 0):
            what.reverse()
            x1 = Reflect.field(Math,"fabs")(n)
            try:
                n = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                n = None
        ind = (n if full else Math.ceil((n / wl)))
        _g2 = []
        _g11 = 0
        _g21 = ind
        while (_g11 < _g21):
            _ = _g11
            _g11 = (_g11 + 1)
            _g12 = 0
            _g22 = wl
            while (_g12 < _g22):
                i1 = _g12
                _g12 = (_g12 + 1)
                _g2.append((what[i1] if i1 >= 0 and i1 < len(what) else None))
        rez = _g2
        if (not full):
            _g3 = []
            _g4 = 0
            _g5 = n
            while (_g4 < _g5):
                i2 = _g4
                _g4 = (_g4 + 1)
                _g3.append((rez[i2] if i2 >= 0 and i2 < len(rez) else None))
            rez = _g3
        return rez

    @staticmethod
    def an_in_b_S(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_S(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                _g3 = 0
                _g12 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g3 < _g12):
                    ibn = _g3
                    _g3 = (_g3 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def an_in_b_I(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_I(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                _g3 = 0
                _g12 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g3 < _g12):
                    ibn = _g3
                    _g3 = (_g3 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def an_in_b_F(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                if ((a[ia] if ia >= 0 and ia < len(a) else None) == (b[ib] if ib >= 0 and ib < len(b) else None)):
                    rez.append([ia, ib])
        return rez

    @staticmethod
    def an_in_bn_F(a,b):
        rez = []
        al = len(a)
        bl = len(b)
        if ((al == 0) or ((bl == 0))):
            return None
        _g = 0
        _g1 = al
        while (_g < _g1):
            ia = _g
            _g = (_g + 1)
            _g2 = 0
            _g11 = bl
            while (_g2 < _g11):
                ib = _g2
                _g2 = (_g2 + 1)
                _g3 = 0
                _g12 = len((b[ib] if ib >= 0 and ib < len(b) else None))
                while (_g3 < _g12):
                    ibn = _g3
                    _g3 = (_g3 + 1)
                    if ((a[ia] if ia >= 0 and ia < len(a) else None) == python_internal_ArrayImpl._get((b[ib] if ib >= 0 and ib < len(b) else None), ibn)):
                        rez.append([ia, ib, ibn])
        return rez

    @staticmethod
    def chain_S(a,n,ring = None):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = geometryxd_NM.chain_indexes(a_l,n,ring)
        _g = []
        _g1 = 0
        _g2 = len(ind)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g11 = []
            _g21 = 0
            _g3 = n
            while (_g21 < _g3):
                j = _g21
                _g21 = (_g21 + 1)
                _g11.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g11)
        rez = _g
        return rez

    @staticmethod
    def chain_I(a,n,ring = None):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = geometryxd_NM.chain_indexes(a_l,n,ring)
        _g = []
        _g1 = 0
        _g2 = len(ind)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g11 = []
            _g21 = 0
            _g3 = n
            while (_g21 < _g3):
                j = _g21
                _g21 = (_g21 + 1)
                _g11.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g11)
        rez = _g
        return rez

    @staticmethod
    def chain_F(a,n,ring = None):
        if (ring is None):
            ring = False
        rez = None
        a_l = len(a)
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = geometryxd_NM.chain_indexes(a_l,n,ring)
        _g = []
        _g1 = 0
        _g2 = len(ind)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g11 = []
            _g21 = 0
            _g3 = n
            while (_g21 < _g3):
                j = _g21
                _g21 = (_g21 + 1)
                _g11.append(python_internal_ArrayImpl._get(a, python_internal_ArrayImpl._get((ind[i] if i >= 0 and i < len(ind) else None), j)))
            _g.append(_g11)
        rez = _g
        return rez

    @staticmethod
    def maxabs(a):
        rez = 0
        _g = 0
        while (_g < len(a)):
            i = (a[_g] if _g >= 0 and _g < len(a) else None)
            _g = (_g + 1)
            if (Reflect.field(Math,"fabs")(i) > Reflect.field(Math,"fabs")(rez)):
                rez = i
        return rez


class geometryxd_Dot3D:
    _hx_class_name = "geometryxd.Dot3D"
    __slots__ = ("x", "y", "z")
    _hx_fields = ["x", "y", "z"]
    _hx_methods = ["get_value", "get_dn", "get_valueM", "get_valueMx", "get_valueMy", "get_valueMz", "get_dot3DM", "get_dot3DMx", "get_dot3DMy", "get_dot3DMz"]

    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z

    def get_value(self):
        return [self.x, self.y, self.z]

    def get_dn(self):
        return len(self.get_value())

    def get_valueM(self):
        a = self.get_value()
        _g = []
        _g1 = 0
        _g2 = len(a)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g

    def get_valueMx(self):
        return [-self.x, self.y, self.z]

    def get_valueMy(self):
        return [self.x, -self.y, self.z]

    def get_valueMz(self):
        return [self.x, self.y, -self.z]

    def get_dot3DM(self):
        return geometryxd_Dot3D(self.x,self.y,self.z)

    def get_dot3DMx(self):
        return geometryxd_Dot3D(-self.x,self.y,self.z)

    def get_dot3DMy(self):
        return geometryxd_Dot3D(self.x,-self.y,self.z)

    def get_dot3DMz(self):
        return geometryxd_Dot3D(self.x,self.y,-self.z)



class geometryxd_DotXD:
    _hx_class_name = "geometryxd.DotXD"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["get_dn", "get_valueM"]

    def __init__(self,dotXD):
        self.value = dotXD

    def get_dn(self):
        return len(self.value)

    def get_valueM(self):
        a = self.value
        _g = []
        _g1 = 0
        _g2 = len(a)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(-(a[i] if i >= 0 and i < len(a) else None))
        return _g



class geometryxd_GeometryXD:
    _hx_class_name = "geometryxd.GeometryXD"
    __slots__ = ()
    _hx_statics = ["main", "vecXDnorm", "vecXDfieldnorm", "zero_vector_inside", "vecXD", "vecXDone", "vecXDfield", "vecXDsame", "vecXDfieldsame", "vecXDrandom", "vecXDsum", "vecXDfieldsum", "vecXDdiff", "vecXDfielddiff", "vecXDback", "vecXDfieldback", "vecXDparalleled_sameside", "vecXDparalleled_opposite", "vecXDparalleled", "vecXDscalar", "vecXDcos", "vecXDangle", "vec3Dnormal", "vec3Dfieldnormal", "vecXDmiddle", "vecXDfieldmiddle", "vecXDsamesize", "vecXDfieldsamesize", "dotXDoffset", "dot3Dline3D_x_plane3D", "projection_dot3D_on_plane3D", "dot3D_to_dot2Dviewplane", "dotXDscale", "vec3Drotate", "vec3Dfield_rotate_around_vec3Daxes", "dot3Drotate", "plane3D_dot3Dnormal", "plane3D_dot_vec_vec", "plane3D_3dots", "plane3D_2dots", "distance_dot3D_plane3D", "random_vec3D_in_plane3D", "random_dot3D_in_plane3D", "curve3D_4dots", "curve3D_3dots", "line3D_2dots", "line3D_dot_offset", "curve3D_4to12", "curve3D_12to4", "beziercubic3D_derivativeparameters", "beziercubic_derivative", "beziercubic3D_derivative", "beziercubic_support_dot_one", "beziercubic3D_support_dot_one", "beziercubic_support_dot_two", "beziercubic3D_support_dot_two", "beziercubic3D_follow_4dots_trajectory", "beziercubic_coordinate", "beziercubic3Ddot", "curve3D_4dots_follow_beziercubic_trajectory", "curve3Doffset", "curve3Drotate", "curve3Dscale", "ellipse2Dperimeter_ramanujan", "tangent_centered_ellipse2Ddot", "ellipse_e_parameter", "ellipse_c_parameter", "tangent_vec3D_in_plane_of_ellipse2D_placed_in_3Dspace", "ellipse3D_dots", "ellipse2Ddot", "curve2D_4dots_elliptic_shape_restricted_to_quarter", "beziercubic3D_elliptic_shape_restricted_to_quarter", "angle_required_to_place_curve_on_ellipse", "polygon3D_inside_ellipse", "polygon3D_vec3Dfield_distances", "polygon3D_in_plane", "polygon3D_to_vec3Dfield", "projection_vec3D_on_plane3D", "angle_vec3Dvec3D_projection_on_plane3D", "dotXD", "dot3D"]

    def __init__(self):
        print("GeometryXD is ready for use")

    @staticmethod
    def main():
        print("GeometryXD is ready for use")

    @staticmethod
    def vecXDnorm(vecXD):
        sum = 0
        _g = 0
        while (_g < len(vecXD)):
            i = (vecXD[_g] if _g >= 0 and _g < len(vecXD) else None)
            _g = (_g + 1)
            sum = (sum + ((i * i)))
        if (sum < 0):
            return Math.NaN
        else:
            return python_lib_Math.sqrt(sum)

    @staticmethod
    def vecXDfieldnorm(vecXDfield):
        rez = None
        _g = []
        _g1 = 0
        while (_g1 < len(vecXDfield)):
            i = (vecXDfield[_g1] if _g1 >= 0 and _g1 < len(vecXDfield) else None)
            _g1 = (_g1 + 1)
            x = geometryxd_GeometryXD.vecXDnorm(i)
            _g.append(x)
        rez = _g
        return rez

    @staticmethod
    def zero_vector_inside(vecXDfield):
        rez = None
        lv = len(vecXDfield)
        if (lv > 0):
            rez = False
            _g = 0
            _g1 = lv
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (geometryxd_GeometryXD.vecXDnorm((vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None)) == 0):
                    rez = True
                    break
        return rez

    @staticmethod
    def vecXD(dotXDa,dotXDb):
        rez = None
        if (not geometryxd_GeometryXD.vecXDsamesize(dotXDa,dotXDb)):
            return rez
        rez = []
        _g = 0
        _g1 = len(dotXDa)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            rez.append(((dotXDb[i] if i >= 0 and i < len(dotXDb) else None) - (dotXDa[i] if i >= 0 and i < len(dotXDa) else None)))
        return rez

    @staticmethod
    def vecXDone(vecXD):
        rez = []
        lv = geometryxd_GeometryXD.vecXDnorm(vecXD)
        if (lv > 0):
            _g = 0
            while (_g < len(vecXD)):
                i = (vecXD[_g] if _g >= 0 and _g < len(vecXD) else None)
                _g = (_g + 1)
                rez.append((i / lv))
            return rez
        else:
            rez = vecXD
        return rez

    @staticmethod
    def vecXDfield(dots):
        rez = []
        _g = 1
        _g1 = len(dots)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            x = geometryxd_GeometryXD.vecXD((dots[0] if 0 < len(dots) else None),(dots[i] if i >= 0 and i < len(dots) else None))
            rez.append(x)
        return rez

    @staticmethod
    def vecXDsame(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) == len(vecXDb)):
            rez = geometryxd_AM.same_xF([vecXDa, vecXDb])
        return rez

    @staticmethod
    def vecXDfieldsame(vecXDfield):
        return geometryxd_AM.same_xF(vecXDfield)

    @staticmethod
    def vecXDrandom(x = None):
        if (x is None):
            x = 3
        _g = []
        _g1 = 0
        _g2 = x
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(0)
        v0 = _g
        _g3 = []
        _g4 = 0
        _g5 = x
        while (_g4 < _g5):
            i1 = _g4
            _g4 = (_g4 + 1)
            _g3.append(0)
        v1 = _g3
        while True:
            rez = None
            if (len(v0) == len(v1)):
                rez = geometryxd_AM.same_xF([v0, v1])
            if (not rez):
                break
            v1 = []
            _g6 = 0
            _g7 = x
            while (_g6 < _g7):
                i2 = _g6
                _g6 = (_g6 + 1)
                x1 = (python_lib_Random.random() - 0.5)
                v1.append(x1)
        v1 = geometryxd_GeometryXD.vecXDone(v1)
        return v1

    @staticmethod
    def vecXDsum(vecXDa,vecXDb):
        return geometryxd_AM.sum_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDfieldsum(vecXDfield):
        return geometryxd_AM.sum_xF(vecXDfield)

    @staticmethod
    def vecXDdiff(vecXDa,vecXDb):
        return geometryxd_AM.diff_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDfielddiff(vecXDfield):
        return geometryxd_AM.diff_xF(vecXDfield)

    @staticmethod
    def vecXDback(vecXD):
        _g = []
        _g1 = 0
        _g2 = len(vecXD)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(-(vecXD[i] if i >= 0 and i < len(vecXD) else None))
        return _g

    @staticmethod
    def vecXDfieldback(vecXDfield):
        _g = []
        _g1 = 0
        _g2 = len(vecXDfield)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            x = geometryxd_GeometryXD.vecXDback((vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None))
            _g.append(x)
        return _g

    @staticmethod
    def vecXDparalleled_sameside(vecXDa,vecXDb):
        rez = False
        if (len(vecXDa) != len(vecXDb)):
            rez = None
        elif (geometryxd_GeometryXD.vecXDangle(vecXDa,vecXDb) == 0):
            rez = True
        else:
            vecXDa1 = geometryxd_GeometryXD.vecXDone(vecXDa)
            vecXDb1 = geometryxd_GeometryXD.vecXDone(vecXDb)
            rez1 = None
            if (len(vecXDa1) == len(vecXDb1)):
                rez1 = geometryxd_AM.same_xF([vecXDa1, vecXDb1])
            rez = rez1
        return rez

    @staticmethod
    def vecXDparalleled_opposite(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) != len(vecXDb)):
            return rez
        return geometryxd_GeometryXD.vecXDparalleled_sameside(vecXDa,geometryxd_GeometryXD.vecXDback(vecXDb))

    @staticmethod
    def vecXDparalleled(vecXDa,vecXDb):
        if (not geometryxd_GeometryXD.vecXDparalleled_sameside(vecXDa,vecXDb)):
            return geometryxd_GeometryXD.vecXDparalleled_opposite(vecXDa,vecXDb)
        else:
            return True

    @staticmethod
    def vecXDscalar(vecXDa,vecXDb):
        rez = None
        if (len(vecXDa) == len(vecXDb)):
            rez = 0
            _g = 0
            _g1 = len(vecXDa)
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                rez = (rez + (((vecXDa[i] if i >= 0 and i < len(vecXDa) else None) * (vecXDb[i] if i >= 0 and i < len(vecXDb) else None))))
        return rez

    @staticmethod
    def vecXDcos(vecXDa,vecXDb):
        rez = None
        la = geometryxd_GeometryXD.vecXDnorm(vecXDa)
        lb = geometryxd_GeometryXD.vecXDnorm(vecXDb)
        if ((la > 0) and ((lb > 0))):
            x = (geometryxd_GeometryXD.vecXDscalar(vecXDa,vecXDb) / ((la * lb)))
            rez = (1 if ((x > 1)) else (-1 if ((x < -1)) else x))
        return rez

    @staticmethod
    def vecXDangle(vecXDa,vecXDb,rad = None):
        if (rad is None):
            rad = False
        rez = None
        la = geometryxd_GeometryXD.vecXDnorm(vecXDa)
        lb = geometryxd_GeometryXD.vecXDnorm(vecXDb)
        if ((la > 0) and ((lb > 0))):
            rez = (Math.acos(geometryxd_GeometryXD.vecXDcos(vecXDa,vecXDb)) if rad else ((Math.acos(geometryxd_GeometryXD.vecXDcos(vecXDa,vecXDb)) * 180) / Math.PI))
        return rez

    @staticmethod
    def vec3Dnormal(vec3Da,vec3Db):
        rez = None
        if ((len(vec3Da) == 3) and ((len(vec3Db) == 3))):
            a = (((vec3Da[1] if 1 < len(vec3Da) else None) * (vec3Db[2] if 2 < len(vec3Db) else None)) - (((vec3Da[2] if 2 < len(vec3Da) else None) * (vec3Db[1] if 1 < len(vec3Db) else None))))
            b = ((-(vec3Da[0] if 0 < len(vec3Da) else None) * (vec3Db[2] if 2 < len(vec3Db) else None)) + (((vec3Da[2] if 2 < len(vec3Da) else None) * (vec3Db[0] if 0 < len(vec3Db) else None))))
            c = (((vec3Da[0] if 0 < len(vec3Da) else None) * (vec3Db[1] if 1 < len(vec3Db) else None)) - (((vec3Da[1] if 1 < len(vec3Da) else None) * (vec3Db[0] if 0 < len(vec3Db) else None))))
            return geometryxd_GeometryXD.vecXDone([a, b, c])
        return rez

    @staticmethod
    def vec3Dfieldnormal(vec3Dfield):
        rez = None
        tmp = None
        if (len((vec3Dfield[0] if 0 < len(vec3Dfield) else None)) == 3):
            rez1 = None
            al = len(vec3Dfield)
            if (al > 1):
                rez1 = True
                size = len((vec3Dfield[0] if 0 < len(vec3Dfield) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((vec3Dfield[i] if i >= 0 and i < len(vec3Dfield) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            rez = (vec3Dfield[0] if 0 < len(vec3Dfield) else None)
            _g2 = 1
            _g11 = len(vec3Dfield)
            while (_g2 < _g11):
                i1 = _g2
                _g2 = (_g2 + 1)
                rez = geometryxd_GeometryXD.vec3Dnormal(rez,(vec3Dfield[i1] if i1 >= 0 and i1 < len(vec3Dfield) else None))
        return rez

    @staticmethod
    def vecXDmiddle(vecXDa,vecXDb):
        return geometryxd_AM.middle_xF([vecXDa, vecXDb])

    @staticmethod
    def vecXDfieldmiddle(vecXDfield):
        return geometryxd_AM.middle_xF(vecXDfield)

    @staticmethod
    def vecXDsamesize(vecXDa,vecXDb):
        a = [vecXDa, vecXDb]
        rez = None
        al = len(a)
        if (al > 1):
            rez = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez = False
        else:
            rez = True
        return rez

    @staticmethod
    def vecXDfieldsamesize(vecXDfield):
        rez = None
        al = len(vecXDfield)
        if (al > 1):
            rez = True
            size = len((vecXDfield[0] if 0 < len(vecXDfield) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((vecXDfield[i] if i >= 0 and i < len(vecXDfield) else None))):
                    rez = False
        else:
            rez = True
        return rez

    @staticmethod
    def dotXDoffset(dotXD,vecXD,t):
        rez = None
        vnorm = geometryxd_GeometryXD.vecXDnorm(vecXD)
        if ((t != 0) and ((vnorm > 0))):
            lv = len(vecXD)
            if (len(dotXD) == lv):
                rez = []
                t = (t / vnorm)
                _g = 0
                _g1 = lv
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    rez.append(((dotXD[i] if i >= 0 and i < len(dotXD) else None) + (((vecXD[i] if i >= 0 and i < len(vecXD) else None) * t))))
            return rez
        else:
            return dotXD

    @staticmethod
    def dot3Dline3D_x_plane3D(dot3D0,vec3D0,vec3Dplane,dplane = None):
        if (dplane is None):
            dplane = 0
        rez = None
        ldot = len(dot3D0)
        lvec = len(vec3D0)
        lplane = len(vec3Dplane)
        if (((ldot == 3) and ((ldot == lvec))) and ((lvec == lplane))):
            checkup = -((((((vec3Dplane[0] if 0 < len(vec3Dplane) else None) * (dot3D0[0] if 0 < len(dot3D0) else None)) + (((vec3Dplane[1] if 1 < len(vec3Dplane) else None) * (dot3D0[1] if 1 < len(dot3D0) else None)))) + (((vec3Dplane[2] if 2 < len(vec3Dplane) else None) * (dot3D0[2] if 2 < len(dot3D0) else None)))) + dplane))
            checkdn = ((((vec3Dplane[0] if 0 < len(vec3Dplane) else None) * (vec3D0[0] if 0 < len(vec3D0) else None)) + (((vec3Dplane[1] if 1 < len(vec3Dplane) else None) * (vec3D0[1] if 1 < len(vec3D0) else None)))) + (((vec3Dplane[2] if 2 < len(vec3Dplane) else None) * (vec3D0[2] if 2 < len(vec3D0) else None))))
            if (checkdn == 0):
                return rez
            elif (checkup == 0):
                return dot3D0
            else:
                t = (checkup / checkdn)
                _g = []
                _g.append(((dot3D0[0] if 0 < len(dot3D0) else None) + (((vec3D0[0] if 0 < len(vec3D0) else None) * t))))
                _g.append(((dot3D0[1] if 1 < len(dot3D0) else None) + (((vec3D0[1] if 1 < len(vec3D0) else None) * t))))
                _g.append(((dot3D0[2] if 2 < len(dot3D0) else None) + (((vec3D0[2] if 2 < len(vec3D0) else None) * t))))
                rez = _g
        return rez

    @staticmethod
    def projection_dot3D_on_plane3D(dot3D,plane3D):
        rez = None
        ldot = len(dot3D)
        lplane = len(plane3D)
        _g = []
        _g.append((plane3D[0] if 0 < len(plane3D) else None))
        _g.append((plane3D[1] if 1 < len(plane3D) else None))
        _g.append((plane3D[2] if 2 < len(plane3D) else None))
        if (((geometryxd_GeometryXD.vecXDnorm(_g) == 0) or ((ldot != 3))) or ((lplane != 4))):
            return rez
        _g1 = []
        _g1.append((plane3D[0] if 0 < len(plane3D) else None))
        _g1.append((plane3D[1] if 1 < len(plane3D) else None))
        _g1.append((plane3D[2] if 2 < len(plane3D) else None))
        checkup = -((geometryxd_AM.multisum_xF([_g1, dot3D]) + (plane3D[3] if 3 < len(plane3D) else None)))
        _g2 = []
        _g2.append((plane3D[0] if 0 < len(plane3D) else None))
        _g2.append((plane3D[1] if 1 < len(plane3D) else None))
        _g2.append((plane3D[2] if 2 < len(plane3D) else None))
        _g3 = []
        _g3.append((plane3D[0] if 0 < len(plane3D) else None))
        _g3.append((plane3D[1] if 1 < len(plane3D) else None))
        _g3.append((plane3D[2] if 2 < len(plane3D) else None))
        checkdn = geometryxd_AM.multisum_xF([_g2, _g3])
        if (checkdn == 0):
            return rez
        elif (checkup == 0):
            return dot3D
        else:
            t = (checkup / checkdn)
            _g4 = []
            _g4.append(((dot3D[0] if 0 < len(dot3D) else None) + (((plane3D[0] if 0 < len(plane3D) else None) * t))))
            _g4.append(((dot3D[1] if 1 < len(dot3D) else None) + (((plane3D[1] if 1 < len(plane3D) else None) * t))))
            _g4.append(((dot3D[2] if 2 < len(dot3D) else None) + (((plane3D[2] if 2 < len(plane3D) else None) * t))))
            rez = _g4
        return rez

    @staticmethod
    def dot3D_to_dot2Dviewplane(dot3D,dot3Dviewplanecenter,vec3Dviewplane,vec3Dviewplane_ox):
        rez = None
        dot = dot3D
        dotc = dot3Dviewplanecenter
        vp = vec3Dviewplane
        vox = vec3Dviewplane_ox
        tmp = None
        if (len(dot) == 3):
            a = [dot, dotc, vp, vox]
            rez1 = None
            al = len(a)
            if (al > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = (not rez1)
        else:
            tmp = True
        if (((tmp or ((geometryxd_GeometryXD.vecXDnorm(vp) == 0))) or ((geometryxd_GeometryXD.vecXDnorm(vox) == 0))) or geometryxd_GeometryXD.vecXDparalleled(vp,vox)):
            return rez
        p = geometryxd_GeometryXD.plane3D_dot3Dnormal(dotc,vp)
        ox = geometryxd_GeometryXD.projection_vec3D_on_plane3D(vox,p)
        oy = geometryxd_GeometryXD.vec3Dnormal(vp,ox)
        dot = geometryxd_GeometryXD.projection_dot3D_on_plane3D(dot,p)
        vdot = geometryxd_GeometryXD.vecXD(dotc,dot)
        norm = geometryxd_GeometryXD.vecXDnorm(vdot)
        cosox = geometryxd_GeometryXD.vecXDcos(ox,vdot)
        cosoy = geometryxd_GeometryXD.vecXDcos(oy,vdot)
        rez = [(norm * cosox), (norm * cosoy)]
        return rez

    @staticmethod
    def dotXDscale(dotXD,scaleXD,dotXDc):
        rez = None
        _g = []
        _g1 = 0
        _g2 = len(dotXD)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(((dotXD[i] if i >= 0 and i < len(dotXD) else None) * (scaleXD[i] if i >= 0 and i < len(scaleXD) else None)))
        sdot = _g
        _g3 = []
        _g4 = 0
        _g5 = len(dotXD)
        while (_g4 < _g5):
            i1 = _g4
            _g4 = (_g4 + 1)
            _g3.append(((dotXDc[i1] if i1 >= 0 and i1 < len(dotXDc) else None) * (scaleXD[i1] if i1 >= 0 and i1 < len(scaleXD) else None)))
        stc = _g3
        vec = geometryxd_GeometryXD.vecXD(stc,dotXDc)
        rez = geometryxd_GeometryXD.dotXDoffset(sdot,vec,geometryxd_GeometryXD.vecXDnorm(vec))
        return rez

    @staticmethod
    def vec3Drotate(vec3D,vec3Daxis,angle,rad = None):
        if (rad is None):
            rad = False
        rez = vec3D
        if (geometryxd_GeometryXD.vecXDparalleled(vec3D,vec3Daxis) or ((angle == 0))):
            return rez
        angle = (angle if rad else ((angle / 180) * Math.PI))
        t = [0, 0, 0]
        vb = geometryxd_GeometryXD.vec3Dnormal(vec3Daxis,vec3D)
        vc = geometryxd_GeometryXD.vec3Dnormal(vb,vec3Daxis)
        t0 = geometryxd_GeometryXD.dotXDoffset(t,vec3Daxis,(geometryxd_GeometryXD.vecXDnorm(vec3D) * geometryxd_GeometryXD.vecXDcos(vec3Daxis,vec3D)))
        t1 = vec3D
        v = geometryxd_GeometryXD.vecXD(t0,t1)
        t1 = geometryxd_GeometryXD.dotXDoffset(t0,vb,(geometryxd_GeometryXD.vecXDnorm(v) * ((Math.NaN if (((angle == Math.POSITIVE_INFINITY) or ((angle == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(angle)))))
        t1 = geometryxd_GeometryXD.dotXDoffset(t1,vc,(geometryxd_GeometryXD.vecXDnorm(v) * ((Math.NaN if (((angle == Math.POSITIVE_INFINITY) or ((angle == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(angle)))))
        rez = geometryxd_GeometryXD.vecXD(t,t1)
        if (geometryxd_GeometryXD.vecXDnorm(rez) == 0):
            rez = vec3D
        return rez

    @staticmethod
    def vec3Dfield_rotate_around_vec3Daxes(vec3Dfield,vec3Daxes,angles,rad = None):
        if (rad is None):
            rad = False
        rez = None
        tmp = None
        tmp1 = None
        tmp2 = None
        rez1 = None
        al = len(vec3Dfield)
        if (al > 1):
            rez1 = True
            size = len((vec3Dfield[0] if 0 < len(vec3Dfield) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((vec3Dfield[i] if i >= 0 and i < len(vec3Dfield) else None))):
                    rez1 = False
        else:
            rez1 = True
        if (not ((not rez1))):
            rez2 = None
            al1 = len(vec3Daxes)
            if (al1 > 1):
                rez2 = True
                size1 = len((vec3Daxes[0] if 0 < len(vec3Daxes) else None))
                _g2 = 1
                _g11 = al1
                while (_g2 < _g11):
                    i1 = _g2
                    _g2 = (_g2 + 1)
                    if (size1 != len((vec3Daxes[i1] if i1 >= 0 and i1 < len(vec3Daxes) else None))):
                        rez2 = False
            else:
                rez2 = True
            tmp2 = (not rez2)
        else:
            tmp2 = True
        if (not (((tmp2 or ((len((vec3Dfield[0] if 0 < len(vec3Dfield) else None)) != 3))) or ((len((vec3Daxes[0] if 0 < len(vec3Daxes) else None)) != 3))))):
            rez3 = None
            _g3 = []
            _g12 = 0
            while (_g12 < len(vec3Dfield)):
                i2 = (vec3Dfield[_g12] if _g12 >= 0 and _g12 < len(vec3Dfield) else None)
                _g12 = (_g12 + 1)
                x = geometryxd_GeometryXD.vecXDnorm(i2)
                _g3.append(x)
            rez3 = _g3
            a = rez3
            rez4 = False
            _g4 = 0
            while (_g4 < len(a)):
                i3 = (a[_g4] if _g4 >= 0 and _g4 < len(a) else None)
                _g4 = (_g4 + 1)
                if (i3 == 0):
                    rez4 = True
            tmp1 = rez4
        else:
            tmp1 = True
        if (not tmp1):
            rez5 = None
            _g5 = []
            _g13 = 0
            while (_g13 < len(vec3Daxes)):
                i4 = (vec3Daxes[_g13] if _g13 >= 0 and _g13 < len(vec3Daxes) else None)
                _g13 = (_g13 + 1)
                x1 = geometryxd_GeometryXD.vecXDnorm(i4)
                _g5.append(x1)
            rez5 = _g5
            a1 = rez5
            rez6 = False
            _g6 = 0
            while (_g6 < len(a1)):
                i5 = (a1[_g6] if _g6 >= 0 and _g6 < len(a1) else None)
                _g6 = (_g6 + 1)
                if (i5 == 0):
                    rez6 = True
            tmp = rez6
        else:
            tmp = True
        if ((tmp or ((len(angles) != len(vec3Dfield)))) or ((len(angles) != len(vec3Daxes)))):
            return rez
        rez = vec3Dfield
        _g7 = 0
        _g14 = len(angles)
        while (_g7 < _g14):
            i6 = _g7
            _g7 = (_g7 + 1)
            _g8 = 0
            _g15 = len(vec3Dfield)
            while (_g8 < _g15):
                j = _g8
                _g8 = (_g8 + 1)
                python_internal_ArrayImpl._set(rez, j, geometryxd_GeometryXD.vec3Drotate((rez[j] if j >= 0 and j < len(rez) else None),(vec3Daxes[i6] if i6 >= 0 and i6 < len(vec3Daxes) else None),(angles[i6] if i6 >= 0 and i6 < len(angles) else None),rad))
        return rez

    @staticmethod
    def dot3Drotate(dot3D,dot3Dc,vec3D,angle,rad = None):
        if (rad is None):
            rad = False
        rez = None
        if (geometryxd_GeometryXD.vecXDnorm(vec3D) == 0):
            return rez
        rez = dot3D
        rez1 = None
        if (len(dot3D) == len(dot3Dc)):
            rez1 = geometryxd_AM.same_xF([dot3D, dot3Dc])
        if (rez1 or ((angle == 0))):
            return rez
        vdot = geometryxd_GeometryXD.vecXD(dot3Dc,dot3D)
        d = geometryxd_GeometryXD.vecXDnorm(vdot)
        vdot = geometryxd_GeometryXD.vec3Drotate(vdot,vec3D,angle,rad)
        rez = geometryxd_GeometryXD.dotXDoffset(dot3Dc,vdot,d)
        return rez

    @staticmethod
    def plane3D_dot3Dnormal(dot3D,vec3D):
        rez = None
        if (((len(dot3D) != 3) or ((len(vec3D) != 3))) or ((geometryxd_GeometryXD.vecXDnorm(vec3D) == 0))):
            return rez
        d = -geometryxd_AM.multisum_xF([vec3D, dot3D])
        rez = [(vec3D[0] if 0 < len(vec3D) else None), (vec3D[1] if 1 < len(vec3D) else None), (vec3D[2] if 2 < len(vec3D) else None), d]
        return rez

    @staticmethod
    def plane3D_dot_vec_vec(dot3D,vec3Da,vec3Db):
        rez = None
        if ((((((len(dot3D) != 3) or ((len(vec3Da) != 3))) or ((len(vec3Db) != 3))) or geometryxd_GeometryXD.vecXDparalleled(vec3Da,vec3Db)) or ((geometryxd_GeometryXD.vecXDnorm(vec3Da) == 0))) or ((geometryxd_GeometryXD.vecXDnorm(vec3Db) == 0))):
            return rez
        rez = geometryxd_GeometryXD.plane3D_dot3Dnormal(dot3D,geometryxd_GeometryXD.vec3Dnormal(vec3Da,vec3Db))
        return rez

    @staticmethod
    def plane3D_3dots(dot3D,dot3Da,dot3Db):
        rez = None
        tmp = None
        tmp1 = None
        tmp2 = None
        tmp3 = None
        if (len(dot3D) == 3):
            a = [dot3D, dot3Da, dot3Db]
            rez1 = None
            al = len(a)
            if (al > 1):
                rez1 = True
                size = len((a[0] if 0 < len(a) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp3 = (not rez1)
        else:
            tmp3 = True
        if (not tmp3):
            rez2 = None
            if (len(dot3D) == len(dot3Da)):
                rez2 = geometryxd_AM.same_xF([dot3D, dot3Da])
            tmp2 = rez2
        else:
            tmp2 = True
        if (not tmp2):
            rez3 = None
            if (len(dot3D) == len(dot3Db)):
                rez3 = geometryxd_AM.same_xF([dot3D, dot3Db])
            tmp1 = rez3
        else:
            tmp1 = True
        if (not tmp1):
            rez4 = None
            if (len(dot3Da) == len(dot3Db)):
                rez4 = geometryxd_AM.same_xF([dot3Da, dot3Db])
            tmp = rez4
        else:
            tmp = True
        if tmp:
            return rez
        rez = geometryxd_GeometryXD.plane3D_dot_vec_vec(dot3D,geometryxd_GeometryXD.vecXD(dot3D,dot3Da),geometryxd_GeometryXD.vecXD(dot3D,dot3Db))
        return rez

    @staticmethod
    def plane3D_2dots(dot3D,dot3Da):
        rez = None
        tmp = None
        if (not ((not geometryxd_GeometryXD.vecXDsamesize(dot3D,dot3Da)))):
            rez1 = None
            if (len(dot3D) == len(dot3Da)):
                rez1 = geometryxd_AM.same_xF([dot3D, dot3Da])
            tmp = rez1
        else:
            tmp = True
        if tmp:
            return rez
        rez = geometryxd_GeometryXD.plane3D_dot3Dnormal(dot3D,geometryxd_GeometryXD.vecXD(dot3D,dot3Da))
        return rez

    @staticmethod
    def distance_dot3D_plane3D(dot3D,plane3D):
        rez = None
        if (((len(dot3D) != 3) or ((len(plane3D) != 4))) or ((geometryxd_GeometryXD.vecXDnorm([(plane3D[0] if 0 < len(plane3D) else None), (plane3D[1] if 1 < len(plane3D) else None), (plane3D[2] if 2 < len(plane3D) else None)]) == 0))):
            return rez
        v = geometryxd_AM.multisum_xF([[(plane3D[0] if 0 < len(plane3D) else None), (plane3D[1] if 1 < len(plane3D) else None), (plane3D[2] if 2 < len(plane3D) else None)], dot3D])
        rez = (Reflect.field(Math,"fabs")((v + (plane3D[3] if 3 < len(plane3D) else None))) / geometryxd_GeometryXD.vecXDnorm([(plane3D[0] if 0 < len(plane3D) else None), (plane3D[1] if 1 < len(plane3D) else None), (plane3D[2] if 2 < len(plane3D) else None)]))
        return rez

    @staticmethod
    def random_vec3D_in_plane3D(plane3D):
        rez = None
        if ((len(plane3D) != 4) or ((geometryxd_GeometryXD.vecXDnorm([(plane3D[0] if 0 < len(plane3D) else None), (plane3D[1] if 1 < len(plane3D) else None), (plane3D[2] if 2 < len(plane3D) else None)]) == 0))):
            return rez
        t0 = geometryxd_GeometryXD.vecXDrandom(3)
        t0 = geometryxd_GeometryXD.projection_dot3D_on_plane3D(t0,plane3D)
        t1 = t0
        while True:
            rez1 = None
            if (len(t0) == len(t1)):
                rez1 = geometryxd_AM.same_xF([t0, t1])
            if (not rez1):
                break
            t1 = []
            x = (((t0[0] if 0 < len(t0) else None) + python_lib_Random.random()) - 0.5)
            t1.append(x)
            x1 = (((t0[1] if 1 < len(t0) else None) + python_lib_Random.random()) - 0.5)
            t1.append(x1)
            x2 = (((t0[2] if 2 < len(t0) else None) + python_lib_Random.random()) - 0.5)
            t1.append(x2)
            t1 = geometryxd_GeometryXD.projection_dot3D_on_plane3D(t1,plane3D)
        rez = geometryxd_GeometryXD.vecXD(t0,t1)
        return rez

    @staticmethod
    def random_dot3D_in_plane3D(plane3D,dot3D,radius):
        rez = None
        if ((len(plane3D) != 4) or ((geometryxd_GeometryXD.vecXDnorm([(plane3D[0] if 0 < len(plane3D) else None), (plane3D[1] if 1 < len(plane3D) else None), (plane3D[2] if 2 < len(plane3D) else None)]) == 0))):
            return rez
        rez = geometryxd_GeometryXD.projection_dot3D_on_plane3D(dot3D,plane3D)
        if (radius == 0):
            return rez
        vec3D = geometryxd_GeometryXD.random_vec3D_in_plane3D(plane3D)
        rez = geometryxd_GeometryXD.dotXDoffset(dot3D,vec3D,(radius * python_lib_Random.random()))
        return rez

    @staticmethod
    def curve3D_4dots(dot3D1,vec3D1,distance1,dot3D2,vec3D2,distance2):
        rez = None
        a = [dot3D1, vec3D1, dot3D2, vec3D2]
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
        else:
            rez1 = True
        if ((not rez1) or ((len(dot3D1) != 3))):
            return rez
        r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,vec3D1,distance1)
        r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,vec3D2,distance2)
        rez = [dot3D1, r1, r2, dot3D2]
        return rez

    @staticmethod
    def curve3D_3dots(dot3D0,dot3D1,dot3D2,lever1 = None,lever2 = None,a_s = None):
        if (lever1 is None):
            lever1 = 0.55
        if (lever2 is None):
            lever2 = 0.55
        if (a_s is None):
            a_s = -1
        rez = None
        a = [dot3D0, dot3D1, dot3D2]
        rez1 = None
        al = len(a)
        if (al > 1):
            rez1 = True
            size = len((a[0] if 0 < len(a) else None))
            _g = 1
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                if (size != len((a[i] if i >= 0 and i < len(a) else None))):
                    rez1 = False
        else:
            rez1 = True
        if ((not rez1) or ((len(dot3D0) != 3))):
            return rez
        v1 = geometryxd_GeometryXD.vecXD(dot3D0,dot3D1)
        v2 = geometryxd_GeometryXD.vecXD(dot3D0,dot3D2)
        v12 = geometryxd_GeometryXD.vecXD(dot3D1,dot3D2)
        t = geometryxd_GeometryXD.dotXDoffset(dot3D1,v12,(geometryxd_GeometryXD.vecXDnorm(v12) / 2))
        v = geometryxd_GeometryXD.vecXD(dot3D0,t)
        r1 = None
        r2 = None
        if (a_s < 0):
            if (lever1 > 0):
                r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,v2,(geometryxd_GeometryXD.vecXDnorm(v2) * lever1))
            elif (lever1 < 0):
                r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,v1,(geometryxd_GeometryXD.vecXDnorm(v1) * lever1))
            else:
                r1 = dot3D1
            if (lever2 > 0):
                r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,v1,(geometryxd_GeometryXD.vecXDnorm(v1) * lever2))
            elif (lever2 < 0):
                r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,v2,(geometryxd_GeometryXD.vecXDnorm(v2) * lever2))
            else:
                r2 = dot3D2
        elif (a_s > 0):
            if (lever1 > 0):
                r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,v1,(geometryxd_GeometryXD.vecXDnorm(v2) * lever1))
            elif (lever1 < 0):
                r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,v2,(geometryxd_GeometryXD.vecXDnorm(v1) * lever1))
            else:
                r1 = dot3D1
            if (lever2 > 0):
                r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,v2,(geometryxd_GeometryXD.vecXDnorm(v1) * lever2))
            elif (lever2 < 0):
                r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,v1,(geometryxd_GeometryXD.vecXDnorm(v2) * lever2))
            else:
                r2 = dot3D2
        else:
            r1 = geometryxd_GeometryXD.dotXDoffset(dot3D1,v,(geometryxd_GeometryXD.vecXDnorm(v) * lever1))
            r2 = geometryxd_GeometryXD.dotXDoffset(dot3D2,v,(geometryxd_GeometryXD.vecXDnorm(v) * lever2))
        rez = [dot3D1, r1, r2, dot3D2]
        return rez

    @staticmethod
    def line3D_2dots(dot3D0,dot3D1):
        rez = None
        if ((not geometryxd_GeometryXD.vecXDsamesize(dot3D0,dot3D1)) or ((len(dot3D0) != 3))):
            return rez
        v = geometryxd_GeometryXD.vecXD(dot3D0,dot3D1)
        lv = geometryxd_GeometryXD.vecXDnorm(v)
        lever0 = geometryxd_GeometryXD.dotXDoffset(dot3D0,v,(lv / 3))
        lever1 = geometryxd_GeometryXD.dotXDoffset(dot3D0,v,((lv * 2) / 3))
        rez = [dot3D0, lever0, lever1, dot3D1]
        return rez

    @staticmethod
    def line3D_dot_offset(dot3D,vec3D,distance):
        rez = None
        if ((((distance == 0) or (not geometryxd_GeometryXD.vecXDsamesize(dot3D,vec3D))) or ((len(dot3D) != 3))) or ((geometryxd_GeometryXD.vecXDnorm(vec3D) == 0))):
            return rez
        rez = geometryxd_GeometryXD.line3D_2dots(dot3D,geometryxd_GeometryXD.dotXDoffset(dot3D,vec3D,distance))
        return rez

    @staticmethod
    def curve3D_4to12(curve):
        rez = None
        tmp = None
        if ((len(curve) == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))):
            rez1 = None
            al = len(curve)
            if (al > 1):
                rez1 = True
                size = len((curve[0] if 0 < len(curve) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve[i] if i >= 0 and i < len(curve) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g2.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 0))
            _g2.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 1))
            _g2.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 2))
            _g2.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 0))
            _g2.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 1))
            _g2.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 2))
            _g2.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 0))
            _g2.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 1))
            _g2.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 2))
            _g2.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 0))
            _g2.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 1))
            _g2.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 2))
            rez = _g2
        return rez

    @staticmethod
    def curve3D_12to4(curve):
        rez = None
        if (len(curve) == 12):
            _g = []
            i = 0
            _g1 = []
            _g1.append((curve[i] if i >= 0 and i < len(curve) else None))
            _g1.append(python_internal_ArrayImpl._get(curve, (1 + i)))
            _g1.append(python_internal_ArrayImpl._get(curve, (2 + i)))
            _g.append(_g1)
            i1 = 3
            _g11 = []
            _g11.append((curve[i1] if i1 >= 0 and i1 < len(curve) else None))
            _g11.append(python_internal_ArrayImpl._get(curve, (1 + i1)))
            _g11.append(python_internal_ArrayImpl._get(curve, (2 + i1)))
            _g.append(_g11)
            i2 = 6
            _g12 = []
            _g12.append((curve[i2] if i2 >= 0 and i2 < len(curve) else None))
            _g12.append(python_internal_ArrayImpl._get(curve, (1 + i2)))
            _g12.append(python_internal_ArrayImpl._get(curve, (2 + i2)))
            _g.append(_g12)
            i3 = 9
            _g13 = []
            _g13.append((curve[i3] if i3 >= 0 and i3 < len(curve) else None))
            _g13.append(python_internal_ArrayImpl._get(curve, (1 + i3)))
            _g13.append(python_internal_ArrayImpl._get(curve, (2 + i3)))
            _g.append(_g13)
            rez = _g
        return rez

    @staticmethod
    def beziercubic3D_derivativeparameters(curve):
        rez = None
        cl = len(curve)
        tmp = None
        if ((cl == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))):
            rez1 = None
            al = len(curve)
            if (al > 1):
                rez1 = True
                size = len((curve[0] if 0 < len(curve) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve[i] if i >= 0 and i < len(curve) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = []
            _g11.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 0))
            _g11.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 0))
            _g11.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 0))
            _g11.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 0))
            _g2.append(_g11)
            _g12 = []
            _g12.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 1))
            _g12.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 1))
            _g12.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 1))
            _g12.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 1))
            _g2.append(_g12)
            _g13 = []
            _g13.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 2))
            _g13.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 2))
            _g13.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 2))
            _g13.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 2))
            _g2.append(_g13)
            rez = _g2
        return rez

    @staticmethod
    def beziercubic_derivative(bcp,p):
        rez = None
        if (len(bcp) == 4):
            rez = (((((3 * ((1 - p))) * ((1 - p))) * (((bcp[1] if 1 < len(bcp) else None) - (bcp[0] if 0 < len(bcp) else None)))) + ((((6 * ((1 - p))) * p) * (((bcp[2] if 2 < len(bcp) else None) - (bcp[1] if 1 < len(bcp) else None)))))) + ((((3 * p) * p) * (((bcp[3] if 3 < len(bcp) else None) - (bcp[2] if 2 < len(bcp) else None))))))
        return rez

    @staticmethod
    def beziercubic3D_derivative(curve,p):
        rez = None
        tmp = None
        if ((len(curve) == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))):
            rez1 = None
            al = len(curve)
            if (al > 1):
                rez1 = True
                size = len((curve[0] if 0 < len(curve) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve[i] if i >= 0 and i < len(curve) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = 0
            rez2 = None
            cl = len(curve)
            rez3 = None
            if ((cl == 4) and ((len((curve[0] if 0 < len(curve) else None)) == 3))):
                rez4 = None
                al1 = len(curve)
                if (al1 > 1):
                    rez4 = True
                    size1 = len((curve[0] if 0 < len(curve) else None))
                    _g3 = 1
                    _g12 = al1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        if (size1 != len((curve[i1] if i1 >= 0 and i1 < len(curve) else None))):
                            rez4 = False
                else:
                    rez4 = True
                rez3 = rez4
            else:
                rez3 = False
            if rez3:
                _g4 = []
                _g13 = []
                _g13.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 0))
                _g4.append(_g13)
                _g14 = []
                _g14.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 1))
                _g4.append(_g14)
                _g15 = []
                _g15.append(python_internal_ArrayImpl._get((curve[0] if 0 < len(curve) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((curve[1] if 1 < len(curve) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((curve[2] if 2 < len(curve) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((curve[3] if 3 < len(curve) else None), 2))
                _g4.append(_g15)
                rez2 = _g4
            _g21 = rez2
            while (_g11 < len(_g21)):
                i2 = (_g21[_g11] if _g11 >= 0 and _g11 < len(_g21) else None)
                _g11 = (_g11 + 1)
                rez5 = None
                if (len(i2) == 4):
                    rez5 = (((((3 * ((1 - p))) * ((1 - p))) * (((i2[1] if 1 < len(i2) else None) - (i2[0] if 0 < len(i2) else None)))) + ((((6 * ((1 - p))) * p) * (((i2[2] if 2 < len(i2) else None) - (i2[1] if 1 < len(i2) else None)))))) + ((((3 * p) * p) * (((i2[3] if 3 < len(i2) else None) - (i2[2] if 2 < len(i2) else None))))))
                _g2.append(rez5)
            rez = _g2
        return rez

    @staticmethod
    def beziercubic_support_dot_one(beziercubic_one_axis_coordinates):
        rez = None
        c = beziercubic_one_axis_coordinates
        if (len(c) == 4):
            rez = ((((((-5 * (c[0] if 0 < len(c) else None)) + ((18 * (c[1] if 1 < len(c) else None)))) - ((9 * (c[2] if 2 < len(c) else None)))) + ((2 * (c[3] if 3 < len(c) else None))))) / 6)
        return rez

    @staticmethod
    def beziercubic3D_support_dot_one(curve3D_4dots):
        rez = None
        c = curve3D_4dots
        tmp = None
        if (len(c) == 4):
            rez1 = None
            al = len(c)
            if (al > 1):
                rez1 = True
                size = len((c[0] if 0 < len(c) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((c[i] if i >= 0 and i < len(c) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = 0
            rez2 = None
            cl = len(c)
            rez3 = None
            if ((cl == 4) and ((len((c[0] if 0 < len(c) else None)) == 3))):
                rez4 = None
                al1 = len(c)
                if (al1 > 1):
                    rez4 = True
                    size1 = len((c[0] if 0 < len(c) else None))
                    _g3 = 1
                    _g12 = al1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        if (size1 != len((c[i1] if i1 >= 0 and i1 < len(c) else None))):
                            rez4 = False
                else:
                    rez4 = True
                rez3 = rez4
            else:
                rez3 = False
            if rez3:
                _g4 = []
                _g13 = []
                _g13.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 0))
                _g4.append(_g13)
                _g14 = []
                _g14.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 1))
                _g4.append(_g14)
                _g15 = []
                _g15.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 2))
                _g4.append(_g15)
                rez2 = _g4
            _g21 = rez2
            while (_g11 < len(_g21)):
                i2 = (_g21[_g11] if _g11 >= 0 and _g11 < len(_g21) else None)
                _g11 = (_g11 + 1)
                rez5 = None
                c1 = i2
                if (len(c1) == 4):
                    rez5 = ((((((-5 * (c1[0] if 0 < len(c1) else None)) + ((18 * (c1[1] if 1 < len(c1) else None)))) - ((9 * (c1[2] if 2 < len(c1) else None)))) + ((2 * (c1[3] if 3 < len(c1) else None))))) / 6)
                _g2.append(rez5)
            rez = _g2
        return rez

    @staticmethod
    def beziercubic_support_dot_two(beziercubic_one_axis_coordinates):
        rez = None
        c = beziercubic_one_axis_coordinates
        if (len(c) == 4):
            rez = ((((((2 * (c[0] if 0 < len(c) else None)) - ((9 * (c[1] if 1 < len(c) else None)))) + ((18 * (c[2] if 2 < len(c) else None)))) - ((5 * (c[3] if 3 < len(c) else None))))) / 6)
        return rez

    @staticmethod
    def beziercubic3D_support_dot_two(curve3D_4dots):
        rez = None
        c = curve3D_4dots
        tmp = None
        if (len(c) == 4):
            rez1 = None
            al = len(c)
            if (al > 1):
                rez1 = True
                size = len((c[0] if 0 < len(c) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((c[i] if i >= 0 and i < len(c) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = 0
            rez2 = None
            cl = len(c)
            rez3 = None
            if ((cl == 4) and ((len((c[0] if 0 < len(c) else None)) == 3))):
                rez4 = None
                al1 = len(c)
                if (al1 > 1):
                    rez4 = True
                    size1 = len((c[0] if 0 < len(c) else None))
                    _g3 = 1
                    _g12 = al1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        if (size1 != len((c[i1] if i1 >= 0 and i1 < len(c) else None))):
                            rez4 = False
                else:
                    rez4 = True
                rez3 = rez4
            else:
                rez3 = False
            if rez3:
                _g4 = []
                _g13 = []
                _g13.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 0))
                _g4.append(_g13)
                _g14 = []
                _g14.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 1))
                _g4.append(_g14)
                _g15 = []
                _g15.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 2))
                _g4.append(_g15)
                rez2 = _g4
            _g21 = rez2
            while (_g11 < len(_g21)):
                i2 = (_g21[_g11] if _g11 >= 0 and _g11 < len(_g21) else None)
                _g11 = (_g11 + 1)
                rez5 = None
                c1 = i2
                if (len(c1) == 4):
                    rez5 = ((((((2 * (c1[0] if 0 < len(c1) else None)) - ((9 * (c1[1] if 1 < len(c1) else None)))) + ((18 * (c1[2] if 2 < len(c1) else None)))) - ((5 * (c1[3] if 3 < len(c1) else None))))) / 6)
                _g2.append(rez5)
            rez = _g2
        return rez

    @staticmethod
    def beziercubic3D_follow_4dots_trajectory(dots):
        rez = None
        tmp = None
        if ((len(dots) == 4) and ((len((dots[0] if 0 < len(dots) else None)) == 3))):
            rez1 = None
            al = len(dots)
            if (al > 1):
                rez1 = True
                size = len((dots[0] if 0 < len(dots) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((dots[i] if i >= 0 and i < len(dots) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            dot_one = geometryxd_GeometryXD.beziercubic3D_support_dot_one(dots)
            dot_two = geometryxd_GeometryXD.beziercubic3D_support_dot_two(dots)
            rez = [(dots[0] if 0 < len(dots) else None), dot_one, dot_two, (dots[3] if 3 < len(dots) else None)]
        return rez

    @staticmethod
    def beziercubic_coordinate(beziercubic_one_axis_coordinates,parameter):
        rez = None
        c = beziercubic_one_axis_coordinates
        p = parameter
        if (len(c) == 4):
            rez = ((((((((1 - p)) * ((1 - p))) * ((1 - p))) * (c[0] if 0 < len(c) else None)) + (((((3 * ((1 - p))) * ((1 - p))) * p) * (c[1] if 1 < len(c) else None)))) + (((((3 * ((1 - p))) * p) * p) * (c[2] if 2 < len(c) else None)))) + ((((p * p) * p) * (c[3] if 3 < len(c) else None))))
        return rez

    @staticmethod
    def beziercubic3Ddot(beziercubic3D,parameter):
        rez = None
        c = beziercubic3D
        p = parameter
        tmp = None
        if ((len(c) == 4) and ((len((c[0] if 0 < len(c) else None)) == 3))):
            rez1 = None
            al = len(c)
            if (al > 1):
                rez1 = True
                size = len((c[0] if 0 < len(c) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((c[i] if i >= 0 and i < len(c) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            _g2 = []
            _g11 = 0
            rez2 = None
            cl = len(c)
            rez3 = None
            if ((cl == 4) and ((len((c[0] if 0 < len(c) else None)) == 3))):
                rez4 = None
                al1 = len(c)
                if (al1 > 1):
                    rez4 = True
                    size1 = len((c[0] if 0 < len(c) else None))
                    _g3 = 1
                    _g12 = al1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        if (size1 != len((c[i1] if i1 >= 0 and i1 < len(c) else None))):
                            rez4 = False
                else:
                    rez4 = True
                rez3 = rez4
            else:
                rez3 = False
            if rez3:
                _g4 = []
                _g13 = []
                _g13.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 0))
                _g13.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 0))
                _g4.append(_g13)
                _g14 = []
                _g14.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 1))
                _g14.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 1))
                _g4.append(_g14)
                _g15 = []
                _g15.append(python_internal_ArrayImpl._get((c[0] if 0 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[1] if 1 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[2] if 2 < len(c) else None), 2))
                _g15.append(python_internal_ArrayImpl._get((c[3] if 3 < len(c) else None), 2))
                _g4.append(_g15)
                rez2 = _g4
            _g21 = rez2
            while (_g11 < len(_g21)):
                i2 = (_g21[_g11] if _g11 >= 0 and _g11 < len(_g21) else None)
                _g11 = (_g11 + 1)
                rez5 = None
                c1 = i2
                p1 = p
                if (len(c1) == 4):
                    rez5 = ((((((((1 - p1)) * ((1 - p1))) * ((1 - p1))) * (c1[0] if 0 < len(c1) else None)) + (((((3 * ((1 - p1))) * ((1 - p1))) * p1) * (c1[1] if 1 < len(c1) else None)))) + (((((3 * ((1 - p1))) * p1) * p1) * (c1[2] if 2 < len(c1) else None)))) + ((((p1 * p1) * p1) * (c1[3] if 3 < len(c1) else None))))
                _g2.append(rez5)
            rez = _g2
        return rez

    @staticmethod
    def curve3D_4dots_follow_beziercubic_trajectory(beziercubic3D):
        rez = None
        c = beziercubic3D
        tmp = None
        if ((len(c) == 4) and ((len((c[0] if 0 < len(c) else None)) == 3))):
            rez1 = None
            al = len(c)
            if (al > 1):
                rez1 = True
                size = len((c[0] if 0 < len(c) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((c[i] if i >= 0 and i < len(c) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if tmp:
            python_internal_ArrayImpl._set(c, 1, geometryxd_GeometryXD.beziercubic3Ddot(c,0.333333333333333315))
            python_internal_ArrayImpl._set(c, 2, geometryxd_GeometryXD.beziercubic3Ddot(c,0.66666666666666663))
        return c

    @staticmethod
    def curve3Doffset(curve3D,vec3D,distance):
        rez = None
        tmp = None
        if ((len(curve3D) == 4) and ((len((curve3D[0] if 0 < len(curve3D) else None)) == 3))):
            rez1 = None
            al = len(curve3D)
            if (al > 1):
                rez1 = True
                size = len((curve3D[0] if 0 < len(curve3D) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve3D[i] if i >= 0 and i < len(curve3D) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if (tmp and ((len(vec3D) == 3))):
            _g2 = []
            _g11 = 0
            while (_g11 < len(curve3D)):
                i1 = (curve3D[_g11] if _g11 >= 0 and _g11 < len(curve3D) else None)
                _g11 = (_g11 + 1)
                x = geometryxd_GeometryXD.dotXDoffset(i1,vec3D,distance)
                _g2.append(x)
            rez = _g2
        return rez

    @staticmethod
    def curve3Drotate(curve3D,dot3D,vec3D,angle,rad = None):
        if (rad is None):
            rad = False
        rez = None
        tmp = None
        if ((len(curve3D) == 4) and ((len((curve3D[0] if 0 < len(curve3D) else None)) == 3))):
            rez1 = None
            al = len(curve3D)
            if (al > 1):
                rez1 = True
                size = len((curve3D[0] if 0 < len(curve3D) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve3D[i] if i >= 0 and i < len(curve3D) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if (((tmp and ((len(dot3D) == 3))) and ((len(vec3D) == 3))) and ((geometryxd_GeometryXD.vecXDnorm(vec3D) > 0))):
            if (angle != 0):
                _g2 = []
                _g11 = 0
                while (_g11 < len(curve3D)):
                    i1 = (curve3D[_g11] if _g11 >= 0 and _g11 < len(curve3D) else None)
                    _g11 = (_g11 + 1)
                    x = geometryxd_GeometryXD.dot3Drotate(i1,dot3D,vec3D,angle,rad)
                    _g2.append(x)
                rez = _g2
            else:
                rez = curve3D
        return rez

    @staticmethod
    def curve3Dscale(curve3D,scale_xyz,dot3D):
        rez = None
        tmp = None
        if ((len(curve3D) == 4) and ((len((curve3D[0] if 0 < len(curve3D) else None)) == 3))):
            rez1 = None
            al = len(curve3D)
            if (al > 1):
                rez1 = True
                size = len((curve3D[0] if 0 < len(curve3D) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((curve3D[i] if i >= 0 and i < len(curve3D) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = rez1
        else:
            tmp = False
        if ((tmp and ((len(dot3D) == 3))) and ((len(scale_xyz) == 3))):
            if (geometryxd_GeometryXD.vecXDnorm(scale_xyz) > 0):
                _g2 = []
                _g11 = 0
                while (_g11 < len(curve3D)):
                    i1 = (curve3D[_g11] if _g11 >= 0 and _g11 < len(curve3D) else None)
                    _g11 = (_g11 + 1)
                    x = geometryxd_GeometryXD.dotXDscale(i1,scale_xyz,dot3D)
                    _g2.append(x)
                rez = _g2
            else:
                _g3 = []
                _g3.append([0, 0, 0])
                _g3.append([0, 0, 0])
                _g3.append([0, 0, 0])
                _g3.append([0, 0, 0])
                rez = _g3
        return rez

    @staticmethod
    def ellipse2Dperimeter_ramanujan(semiaxis_a,semiaxis_b):
        rez = None
        a = semiaxis_a
        b = semiaxis_b
        if ((a > 0) and ((b > 0))):
            v = ((((3 * a) + b)) * ((a + ((3 * b)))))
            l1 = (Math.PI * (((3 * ((a + b))) - ((Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v))))))
            v1 = (4 - (((((3 * ((a - b))) * ((a - b))) / ((a + b))) / ((a + b)))))
            l2 = ((Math.PI * ((a + b))) * ((1 + ((((((3 * ((a - b))) * ((a - b))) / ((a + b))) / ((a + b))) / ((10 + ((Math.NaN if ((v1 < 0)) else python_lib_Math.sqrt(v1))))))))))
            rez = (l1 if (python_lib_Math.isnan(l1)) else (l2 if (python_lib_Math.isnan(l2)) else max(l1,l2)))
        return rez

    @staticmethod
    def tangent_centered_ellipse2Ddot(semiaxis_a,semiaxis_b,ellipse_dot2D):
        v = None
        a = semiaxis_a
        b = semiaxis_b
        if (((a > 0) and ((b > 0))) and ((len(ellipse_dot2D) == 2))):
            x0 = (ellipse_dot2D[0] if 0 < len(ellipse_dot2D) else None)
            y0 = (ellipse_dot2D[1] if 1 < len(ellipse_dot2D) else None)
            x = None
            y = None
            if (x0 != 0):
                x = (0.9 * x0)
                if (x0 > 0):
                    if (y0 == 0):
                        v = [[x0, y0], [x0, 1]]
                    else:
                        y = (((((1 - (((x * x0) / ((a * a)))))) * b) * b) / y0)
                        if (y0 > 0):
                            v = [[x0, y0], [x, y]]
                        else:
                            v = [[x, y], [x0, y0]]
                elif (x0 < 0):
                    if (y0 == 0):
                        v = [[x0, y0], [x0, -1]]
                    else:
                        y = (((((1 - (((x * x0) / ((a * a)))))) * b) * b) / y0)
                        if (y0 > 0):
                            v = [[x, y], [x0, y0]]
                        else:
                            v = [[x0, y0], [x, y]]
            else:
                y = (0.9 * y0)
                if (y0 > 0):
                    if (x0 == 0):
                        v = [[x0, y0], [-1, y0]]
                    else:
                        x = (((((1 - (((y * y0) / ((b * b)))))) * a) * a) / x0)
                        if (x0 > 0):
                            v = [[x, y], [x0, y0]]
                        else:
                            v = [[x0, y0], [x, y]]
                elif (y0 < 0):
                    if (x0 == 0):
                        v = [[x0, y0], [1, y0]]
                    else:
                        x = (((((1 - (((y * y0) / ((b * b)))))) * a) * a) / x0)
                        if (x0 < 0):
                            v = [[x, y], [x0, y0]]
                        else:
                            v = [[x0, y0], [x, y]]
        return v

    @staticmethod
    def ellipse_e_parameter(semiaxis_a,semiaxis_b):
        rez = None
        a = semiaxis_a
        b = semiaxis_b
        if (((a >= 0) and ((b >= 0))) and (((a + b) > 0))):
            if (a >= b):
                v = (1 - (((b * b) / ((a * a)))))
                rez = (Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v))
            else:
                v1 = (1 - (((a * a) / ((b * b)))))
                rez = -((Math.NaN if ((v1 < 0)) else python_lib_Math.sqrt(v1)))
        return rez

    @staticmethod
    def ellipse_c_parameter(semiaxis_a,semiaxis_b):
        rez = None
        a = semiaxis_a
        b = semiaxis_b
        rez1 = None
        a1 = a
        b1 = b
        if (((a1 >= 0) and ((b1 >= 0))) and (((a1 + b1) > 0))):
            if (a1 >= b1):
                v = (1 - (((b1 * b1) / ((a1 * a1)))))
                rez1 = (Math.NaN if ((v < 0)) else python_lib_Math.sqrt(v))
            else:
                v1 = (1 - (((a1 * a1) / ((b1 * b1)))))
                rez1 = -((Math.NaN if ((v1 < 0)) else python_lib_Math.sqrt(v1)))
        e = rez1
        if (e is None):
            return rez
        rez = ((a * e) if ((a >= b)) else (b * e))
        return rez

    @staticmethod
    def tangent_vec3D_in_plane_of_ellipse2D_placed_in_3Dspace(dot3D,vec3Dnormal_ellipse_plane,vec3Dsemiaxis_a_direction,semiaxis_a,semiaxis_b,semiaxis_a_negative,semiaxis_b_negative,angle,rad):
        rez = None
        t = dot3D
        vn = vec3Dnormal_ellipse_plane
        va = vec3Dsemiaxis_a_direction
        a = semiaxis_a
        b = semiaxis_b
        an = semiaxis_a_negative
        bn = semiaxis_b_negative
        if ((((((((((len(t) == 3) and ((len(vn) == 3))) and ((len(va) == 3))) and ((geometryxd_GeometryXD.vecXDnorm(vn) > 0))) and ((geometryxd_GeometryXD.vecXDnorm(va) > 0))) and (not geometryxd_GeometryXD.vecXDparalleled(vn,va))) and ((a > 0))) and ((b > 0))) and ((an > 0))) and ((bn > 0))):
            ea = None
            eb = None
            _g = geometryxd_NM.angle_quadrant(angle,rad)
            if (_g == 1):
                ea = a
                eb = b
            elif (_g == 2):
                ea = an
                eb = b
            elif (_g == 3):
                ea = an
                eb = bn
            elif (_g == 4):
                ea = a
                eb = bn
            else:
                pass
            ep = geometryxd_GeometryXD.plane3D_dot3Dnormal(t,vn)
            va1 = geometryxd_GeometryXD.projection_vec3D_on_plane3D(va,ep)
            vb = geometryxd_GeometryXD.vec3Dnormal(vn,va1)
            rad1 = rad
            if (rad1 is None):
                rad1 = False
            u = angle
            a1 = ea
            b1 = eb
            if (not rad1):
                u = ((u / 180) * Math.PI)
            edot = [(a1 * ((Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u)))), (b1 * ((Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u))))]
            dxy0dxy1 = geometryxd_GeometryXD.tangent_centered_ellipse2Ddot(ea,eb,edot)
            te = geometryxd_GeometryXD.dotXDoffset(t,va1,python_internal_ArrayImpl._get((dxy0dxy1[0] if 0 < len(dxy0dxy1) else None), 0))
            te1 = geometryxd_GeometryXD.dotXDoffset(te,vb,python_internal_ArrayImpl._get((dxy0dxy1[0] if 0 < len(dxy0dxy1) else None), 1))
            tt = geometryxd_GeometryXD.dotXDoffset(t,va1,python_internal_ArrayImpl._get((dxy0dxy1[1] if 1 < len(dxy0dxy1) else None), 0))
            tt1 = geometryxd_GeometryXD.dotXDoffset(tt,vb,python_internal_ArrayImpl._get((dxy0dxy1[1] if 1 < len(dxy0dxy1) else None), 1))
            rez = geometryxd_GeometryXD.vecXD(te1,tt1)
        return rez

    @staticmethod
    def ellipse3D_dots(dot3D,vec3Dsemiaxes,semiaxes):
        rez = None
        tmp = None
        tmp1 = None
        tmp2 = None
        if (not (((len(dot3D) != 3) or ((len(vec3Dsemiaxes) != 4))))):
            rez1 = None
            al = len(vec3Dsemiaxes)
            if (al > 1):
                rez1 = True
                size = len((vec3Dsemiaxes[0] if 0 < len(vec3Dsemiaxes) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((vec3Dsemiaxes[i] if i >= 0 and i < len(vec3Dsemiaxes) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp2 = (not rez1)
        else:
            tmp2 = True
        if (not ((tmp2 or ((len(semiaxes) != 4))))):
            rez2 = False
            _g2 = 0
            while (_g2 < len(semiaxes)):
                i1 = (semiaxes[_g2] if _g2 >= 0 and _g2 < len(semiaxes) else None)
                _g2 = (_g2 + 1)
                if (i1 == 0):
                    rez2 = True
            tmp1 = rez2
        else:
            tmp1 = True
        if (not tmp1):
            rez3 = None
            lv = len(vec3Dsemiaxes)
            if (lv > 0):
                rez3 = False
                _g3 = 0
                _g11 = lv
                while (_g3 < _g11):
                    i2 = _g3
                    _g3 = (_g3 + 1)
                    if (geometryxd_GeometryXD.vecXDnorm((vec3Dsemiaxes[i2] if i2 >= 0 and i2 < len(vec3Dsemiaxes) else None)) == 0):
                        rez3 = True
                        break
            tmp = rez3
        else:
            tmp = True
        if tmp:
            return rez
        t0 = dot3D
        va = (vec3Dsemiaxes[0] if 0 < len(vec3Dsemiaxes) else None)
        vb = (vec3Dsemiaxes[1] if 1 < len(vec3Dsemiaxes) else None)
        vad = (vec3Dsemiaxes[2] if 2 < len(vec3Dsemiaxes) else None)
        vbd = (vec3Dsemiaxes[3] if 3 < len(vec3Dsemiaxes) else None)
        a = (semiaxes[0] if 0 < len(semiaxes) else None)
        b = (semiaxes[1] if 1 < len(semiaxes) else None)
        ad = (semiaxes[2] if 2 < len(semiaxes) else None)
        bd = (semiaxes[3] if 3 < len(semiaxes) else None)
        v = (0.25 * Math.PI)
        cos45 = (Math.NaN if (((v == Math.POSITIVE_INFINITY) or ((v == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(v))
        v_0 = va
        v_1 = vb
        v_2 = vad
        v_3 = vbd
        d_0 = (a * cos45)
        d_1 = (b * cos45)
        d_2 = (ad * cos45)
        d_3 = (bd * cos45)
        vv_0 = vb
        vv_1 = vad
        vv_2 = vbd
        vv_3 = va
        dd_0 = (b * cos45)
        dd_1 = (ad * cos45)
        dd_2 = (bd * cos45)
        dd_3 = (a * cos45)
        rez = [t0]
        x = geometryxd_GeometryXD.dotXDoffset(t0,(vec3Dsemiaxes[0] if 0 < len(vec3Dsemiaxes) else None),(semiaxes[0] if 0 < len(semiaxes) else None))
        rez.append(x)
        x1 = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(t0,v_0,d_0),vv_0,dd_0)
        rez.append(x1)
        x2 = geometryxd_GeometryXD.dotXDoffset(t0,(vec3Dsemiaxes[1] if 1 < len(vec3Dsemiaxes) else None),(semiaxes[1] if 1 < len(semiaxes) else None))
        rez.append(x2)
        x3 = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(t0,v_1,d_1),vv_1,dd_1)
        rez.append(x3)
        x4 = geometryxd_GeometryXD.dotXDoffset(t0,(vec3Dsemiaxes[2] if 2 < len(vec3Dsemiaxes) else None),(semiaxes[2] if 2 < len(semiaxes) else None))
        rez.append(x4)
        x5 = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(t0,v_2,d_2),vv_2,dd_2)
        rez.append(x5)
        x6 = geometryxd_GeometryXD.dotXDoffset(t0,(vec3Dsemiaxes[3] if 3 < len(vec3Dsemiaxes) else None),(semiaxes[3] if 3 < len(semiaxes) else None))
        rez.append(x6)
        x7 = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(t0,v_3,d_3),vv_3,dd_3)
        rez.append(x7)
        return rez

    @staticmethod
    def ellipse2Ddot(angle,semiaxis_a_ox,semiaxis_b_oy,rad = None):
        if (rad is None):
            rad = False
        u = angle
        a = semiaxis_a_ox
        b = semiaxis_b_oy
        if (not rad):
            u = ((u / 180) * Math.PI)
        return [(a * ((Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u)))), (b * ((Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u))))]

    @staticmethod
    def curve2D_4dots_elliptic_shape_restricted_to_quarter(angle0,angle1,semiaxis_a_ox,semiaxis_b_oy,rad = None):
        if (rad is None):
            rad = False
        rez = None
        a0 = (((angle0 * 180) / Math.PI) if rad else angle0)
        a1 = (((angle1 * 180) / Math.PI) if rad else angle1)
        a0 = (90 if ((a0 > 90)) else (0 if ((a0 < 0)) else a0))
        a1 = (90 if ((a1 > 90)) else (0 if ((a1 < 0)) else a1))
        a0 = (0 if ((a0 >= a1)) else a0)
        du = (a1 - a0)
        ae = semiaxis_a_ox
        be = semiaxis_b_oy
        _g = []
        a = a0
        rad1 = False
        if (rad1 is None):
            rad1 = False
        u = a
        a2 = ae
        b = be
        if (not rad1):
            u = ((u / 180) * Math.PI)
        x = (Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u))
        x1 = (Math.NaN if (((u == Math.POSITIVE_INFINITY) or ((u == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u))
        _g.append([(a2 * x), (b * x1)])
        a3 = (a0 + ((du / 3)))
        rad2 = False
        if (rad2 is None):
            rad2 = False
        u1 = a3
        a4 = ae
        b1 = be
        if (not rad2):
            u1 = ((u1 / 180) * Math.PI)
        x2 = (Math.NaN if (((u1 == Math.POSITIVE_INFINITY) or ((u1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u1))
        x3 = (Math.NaN if (((u1 == Math.POSITIVE_INFINITY) or ((u1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u1))
        _g.append([(a4 * x2), (b1 * x3)])
        a5 = (a0 + (((du * 2) / 3)))
        rad3 = False
        if (rad3 is None):
            rad3 = False
        u2 = a5
        a6 = ae
        b2 = be
        if (not rad3):
            u2 = ((u2 / 180) * Math.PI)
        x4 = (Math.NaN if (((u2 == Math.POSITIVE_INFINITY) or ((u2 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u2))
        x5 = (Math.NaN if (((u2 == Math.POSITIVE_INFINITY) or ((u2 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u2))
        _g.append([(a6 * x4), (b2 * x5)])
        a7 = (a0 + du)
        rad4 = False
        if (rad4 is None):
            rad4 = False
        u3 = a7
        a8 = ae
        b3 = be
        if (not rad4):
            u3 = ((u3 / 180) * Math.PI)
        x6 = (Math.NaN if (((u3 == Math.POSITIVE_INFINITY) or ((u3 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u3))
        x7 = (Math.NaN if (((u3 == Math.POSITIVE_INFINITY) or ((u3 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u3))
        _g.append([(a8 * x6), (b3 * x7)])
        rez = _g
        return rez

    @staticmethod
    def beziercubic3D_elliptic_shape_restricted_to_quarter(dot3Dc,vec3D_a_ox,vec3D_b_oy,semiaxis_a_ox,semiaxis_b_oy,angle0,angle1,rad = None):
        if (rad is None):
            rad = False
        rez = None
        tc = dot3Dc
        va = vec3D_a_ox
        vb = vec3D_b_oy
        a = semiaxis_a_ox
        b = semiaxis_b_oy
        if (((((len(tc) == 3) and ((len(va) == 3))) and ((len(vb) == 3))) and ((geometryxd_GeometryXD.vecXDnorm(va) > 0))) and ((geometryxd_GeometryXD.vecXDnorm(vb) > 0))):
            dxdy = geometryxd_GeometryXD.curve2D_4dots_elliptic_shape_restricted_to_quarter(angle0,angle1,a,b,rad)
            _g = []
            _g1 = 0
            while (_g1 < len(dxdy)):
                i = (dxdy[_g1] if _g1 >= 0 and _g1 < len(dxdy) else None)
                _g1 = (_g1 + 1)
                x = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(tc,va,(i[0] if 0 < len(i) else None)),vb,(i[1] if 1 < len(i) else None))
                _g.append(x)
            rez = _g
            rez1 = None
            rez2 = None
            if ((len(rez) == 4) and ((len((rez[0] if 0 < len(rez) else None)) == 3))):
                rez3 = None
                al = len(rez)
                if (al > 1):
                    rez3 = True
                    size = len((rez[0] if 0 < len(rez) else None))
                    _g2 = 1
                    _g11 = al
                    while (_g2 < _g11):
                        i1 = _g2
                        _g2 = (_g2 + 1)
                        if (size != len((rez[i1] if i1 >= 0 and i1 < len(rez) else None))):
                            rez3 = False
                else:
                    rez3 = True
                rez2 = rez3
            else:
                rez2 = False
            if rez2:
                dot_one = geometryxd_GeometryXD.beziercubic3D_support_dot_one(rez)
                dot_two = geometryxd_GeometryXD.beziercubic3D_support_dot_two(rez)
                rez1 = [(rez[0] if 0 < len(rez) else None), dot_one, dot_two, (rez[3] if 3 < len(rez) else None)]
            rez = rez1
        return rez

    @staticmethod
    def angle_required_to_place_curve_on_ellipse(curve_length,semiaxis_a_ox,semiaxis_b_oy,angle0,rad = None):
        if (rad is None):
            rad = False
        rez = None
        cl = curve_length
        a = semiaxis_a_ox
        b = semiaxis_b_oy
        u = angle0
        le = 0
        xy = None
        if (((cl > 0) and ((a > 0))) and ((b > 0))):
            rad1 = rad
            if (rad1 is None):
                rad1 = False
            u1 = u
            a1 = a
            b1 = b
            if (not rad1):
                u1 = ((u1 / 180) * Math.PI)
            xy0 = [(a1 * ((Math.NaN if (((u1 == Math.POSITIVE_INFINITY) or ((u1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u1)))), (b1 * ((Math.NaN if (((u1 == Math.POSITIVE_INFINITY) or ((u1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u1))))]
            if rad:
                u = ((u * 180) / Math.PI)
            _g = 1
            while (_g < 361):
                ue = _g
                _g = (_g + 1)
                u2 = (u + ue)
                a2 = a
                b2 = b
                u2 = ((u2 / 180) * Math.PI)
                xy = [(a2 * ((Math.NaN if (((u2 == Math.POSITIVE_INFINITY) or ((u2 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(u2)))), (b2 * ((Math.NaN if (((u2 == Math.POSITIVE_INFINITY) or ((u2 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(u2))))]
                le = (le + geometryxd_GeometryXD.vecXDnorm(geometryxd_GeometryXD.vecXD(xy0,xy)))
                if (le >= cl):
                    if rad:
                        return ((ue / 180) * Math.PI)
                    else:
                        return ue
                xy0 = xy
            rez = ((2. * Math.PI) if rad else 360)
        return rez

    @staticmethod
    def polygon3D_inside_ellipse(dot3D,vec3Dsemiaxes,semiaxes,angle_proportions):
        rez = None
        tmp = None
        tmp1 = None
        tmp2 = None
        if (not (((len(dot3D) != 3) or ((len(vec3Dsemiaxes) != 4))))):
            rez1 = None
            al = len(vec3Dsemiaxes)
            if (al > 1):
                rez1 = True
                size = len((vec3Dsemiaxes[0] if 0 < len(vec3Dsemiaxes) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((vec3Dsemiaxes[i] if i >= 0 and i < len(vec3Dsemiaxes) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp2 = (not rez1)
        else:
            tmp2 = True
        if (not (((tmp2 or ((len(semiaxes) != 4))) or ((len(angle_proportions) < 1))))):
            rez2 = False
            _g2 = 0
            while (_g2 < len(angle_proportions)):
                i1 = (angle_proportions[_g2] if _g2 >= 0 and _g2 < len(angle_proportions) else None)
                _g2 = (_g2 + 1)
                if (i1 < 0):
                    rez2 = True
            tmp1 = rez2
        else:
            tmp1 = True
        if (not tmp1):
            rez3 = None
            al1 = len(angle_proportions)
            if (al1 > 0):
                rez3 = 0
                _g3 = 0
                _g11 = al1
                while (_g3 < _g11):
                    i2 = _g3
                    _g3 = (_g3 + 1)
                    rez3 = (rez3 + (angle_proportions[i2] if i2 >= 0 and i2 < len(angle_proportions) else None))
            tmp = (rez3 == 0)
        else:
            tmp = True
        if tmp:
            return rez
        t0 = dot3D
        va = (vec3Dsemiaxes[0] if 0 < len(vec3Dsemiaxes) else None)
        vb = (vec3Dsemiaxes[1] if 1 < len(vec3Dsemiaxes) else None)
        vad = (vec3Dsemiaxes[2] if 2 < len(vec3Dsemiaxes) else None)
        vbd = (vec3Dsemiaxes[3] if 3 < len(vec3Dsemiaxes) else None)
        a = (semiaxes[0] if 0 < len(semiaxes) else None)
        b = (semiaxes[1] if 1 < len(semiaxes) else None)
        ad = (semiaxes[2] if 2 < len(semiaxes) else None)
        bd = (semiaxes[3] if 3 < len(semiaxes) else None)
        doli = angle_proportions
        rez4 = None
        al2 = len(doli)
        if (al2 > 0):
            rez4 = 0
            _g4 = 0
            _g12 = al2
            while (_g4 < _g12):
                i3 = _g4
                _g4 = (_g4 + 1)
                rez4 = (rez4 + (doli[i3] if i3 >= 0 and i3 < len(doli) else None))
        x = (360 / rez4)
        axis_a = None
        axis_b = None
        dlina_a = None
        dlina_b = None
        v = None
        d = None
        vv = None
        dd = None
        rez = [t0]
        u = 0
        _g5 = 0
        while (_g5 < len(doli)):
            i4 = (doli[_g5] if _g5 >= 0 and _g5 < len(doli) else None)
            _g5 = (_g5 + 1)
            axis_a = va
            dlina_a = a
            axis_b = vb
            dlina_b = b
            if ((u > 90) and ((u <= 270))):
                axis_a = vad
                dlina_a = ad
            if (u > 180):
                axis_b = vbd
                dlina_b = bd
            v = axis_a
            v1 = ((u / 180) * Math.PI)
            v2 = (Math.NaN if (((v1 == Math.POSITIVE_INFINITY) or ((v1 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.cos(v1))
            d = (dlina_a * Reflect.field(Math,"fabs")(v2))
            vv = axis_b
            v3 = ((u / 180) * Math.PI)
            v4 = (Math.NaN if (((v3 == Math.POSITIVE_INFINITY) or ((v3 == Math.NEGATIVE_INFINITY)))) else python_lib_Math.sin(v3))
            dd = (dlina_b * Reflect.field(Math,"fabs")(v4))
            x1 = geometryxd_GeometryXD.dotXDoffset(geometryxd_GeometryXD.dotXDoffset(t0,v,d),vv,dd)
            rez.append(x1)
            u = (u + ((i4 * x)))
        return rez

    @staticmethod
    def polygon3D_vec3Dfield_distances(dot3D,vec3Dfield,distances):
        rez = None
        tmp = None
        if (len(dot3D) == 3):
            rez1 = None
            al = len(vec3Dfield)
            if (al > 1):
                rez1 = True
                size = len((vec3Dfield[0] if 0 < len(vec3Dfield) else None))
                _g = 1
                _g1 = al
                while (_g < _g1):
                    i = _g
                    _g = (_g + 1)
                    if (size != len((vec3Dfield[i] if i >= 0 and i < len(vec3Dfield) else None))):
                        rez1 = False
            else:
                rez1 = True
            tmp = (not rez1)
        else:
            tmp = True
        if ((tmp or ((len(vec3Dfield) != len(distances)))) or ((len((vec3Dfield[0] if 0 < len(vec3Dfield) else None)) != 3))):
            return rez
        rez = [dot3D]
        _g2 = 0
        _g11 = len(vec3Dfield)
        while (_g2 < _g11):
            i1 = _g2
            _g2 = (_g2 + 1)
            x = geometryxd_GeometryXD.dotXDoffset(dot3D,(vec3Dfield[i1] if i1 >= 0 and i1 < len(vec3Dfield) else None),(distances[i1] if i1 >= 0 and i1 < len(distances) else None))
            rez.append(x)
        return rez

    @staticmethod
    def polygon3D_in_plane(dot3D,vec3Dplane_normal,vec3Dsemiaxis_a_direction,angle_proportions,distances):
        rez = None
        t = dot3D
        vn = vec3Dplane_normal
        va = vec3Dsemiaxis_a_direction
        ap = angle_proportions
        d = distances
        if (((((((len(t) != 3) or ((len(vn) != 3))) or ((len(va) != 3))) or ((len(ap) != len(d)))) or ((geometryxd_GeometryXD.vecXDnorm(va) == 0))) or ((geometryxd_GeometryXD.vecXDnorm(vn) == 0))) or geometryxd_GeometryXD.vecXDparalleled(va,vn)):
            return rez
        rez1 = None
        al = len(ap)
        if (al > 0):
            rez1 = 0
            _g = 0
            _g1 = al
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                rez1 = (rez1 + (ap[i] if i >= 0 and i < len(ap) else None))
        x = (360 / rez1)
        va = geometryxd_GeometryXD.projection_vec3D_on_plane3D(va,[(vn[0] if 0 < len(vn) else None), (vn[1] if 1 < len(vn) else None), (vn[2] if 2 < len(vn) else None), 0])
        rez = [t]
        u = 0
        _g2 = 0
        _g11 = len(d)
        while (_g2 < _g11):
            i1 = _g2
            _g2 = (_g2 + 1)
            x1 = geometryxd_GeometryXD.dotXDoffset(t,geometryxd_GeometryXD.vec3Drotate(va,vn,u),(distances[i1] if i1 >= 0 and i1 < len(distances) else None))
            rez.append(x1)
            u = (u + ((x * (ap[i1] if i1 >= 0 and i1 < len(ap) else None))))
        return rez

    @staticmethod
    def polygon3D_to_vec3Dfield(polygon3D):
        _g = []
        _g1 = 1
        _g2 = len(polygon3D)
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            x = geometryxd_GeometryXD.vecXD((polygon3D[0] if 0 < len(polygon3D) else None),(polygon3D[i] if i >= 0 and i < len(polygon3D) else None))
            _g.append(x)
        return _g

    @staticmethod
    def projection_vec3D_on_plane3D(vec3D,plane3D):
        rez = None
        if ((len(vec3D) != 3) or ((len(plane3D) != 4))):
            return rez
        _g = []
        _g.append((plane3D[0] if 0 < len(plane3D) else None))
        _g.append((plane3D[1] if 1 < len(plane3D) else None))
        _g.append((plane3D[2] if 2 < len(plane3D) else None))
        vp = _g
        if ((geometryxd_GeometryXD.vecXDparalleled(vec3D,vp) or ((geometryxd_GeometryXD.vecXDnorm(vec3D) == 0))) or ((geometryxd_GeometryXD.vecXDnorm(vp) == 0))):
            return rez
        t0 = [0, 0, 0]
        t1 = geometryxd_GeometryXD.dotXDoffset(t0,vec3D,1)
        p = geometryxd_GeometryXD.plane3D_dot3Dnormal(t0,vp)
        t1 = geometryxd_GeometryXD.projection_dot3D_on_plane3D(t1,p)
        rez = geometryxd_GeometryXD.vecXD(t0,t1)
        return rez

    @staticmethod
    def angle_vec3Dvec3D_projection_on_plane3D(vec3D1,vec3D2,plane3D,rad = None):
        if (rad is None):
            rad = False
        rez = None
        v1 = vec3D1
        v2 = vec3D2
        v1l = len(v1)
        v2l = len(v2)
        v1mod = geometryxd_GeometryXD.vecXDnorm(v1)
        v2mod = geometryxd_GeometryXD.vecXDnorm(v2)
        if ((((v1l != 3) or ((v2l != 3))) or ((v1mod == 0))) or ((v2mod == 0))):
            return rez
        p = plane3D
        if (len(p) != 4):
            return rez
        _g = []
        _g.append((p[0] if 0 < len(p) else None))
        _g.append((p[1] if 1 < len(p) else None))
        _g.append((p[2] if 2 < len(p) else None))
        vn = _g
        if (geometryxd_GeometryXD.vecXDnorm(vn) == 0):
            return rez
        if geometryxd_GeometryXD.vecXDparalleled_sameside(v1,v2):
            return 0
        pv1 = geometryxd_GeometryXD.projection_vec3D_on_plane3D(v1,p)
        pv2 = geometryxd_GeometryXD.projection_vec3D_on_plane3D(v2,p)
        uvv = geometryxd_GeometryXD.vecXDangle(pv1,pv2,rad)
        pvn = (vn if (geometryxd_GeometryXD.vecXDparalleled(pv1,pv2)) else geometryxd_GeometryXD.vec3Dnormal(pv1,pv2))
        uvnpvn = geometryxd_GeometryXD.vecXDangle(vn,pvn,rad)
        uznak = ((0.5 * Math.PI) if rad else 90)
        rez = (-uvv if ((uvnpvn > uznak)) else uvv)
        return rez

    @staticmethod
    def dotXD(dot):
        return geometryxd_DotXD(dot)

    @staticmethod
    def dot3D(x,y,z):
        return geometryxd_Dot3D(x,y,z)


class geometryxd_NM:
    _hx_class_name = "geometryxd.NM"
    __slots__ = ()
    _hx_statics = ["sign_I", "sign_F", "sign3_I", "sign3_F", "sin_cos_cut", "degrees", "radians", "angle_quadrant", "steps_internal", "steps_external", "chain_indexes"]

    def __init__(self):
        print("number manipulation is ready for use")

    @staticmethod
    def sign_I(x):
        if (x < 0):
            return -1
        else:
            return 1

    @staticmethod
    def sign_F(x):
        if (x < 0):
            return -1
        else:
            return 1

    @staticmethod
    def sign3_I(x):
        if (x < 0):
            return -1
        elif (x > 0):
            return 1
        else:
            return 0

    @staticmethod
    def sign3_F(x):
        if (x < 0):
            return -1
        elif (x > 0):
            return 1
        else:
            return 0

    @staticmethod
    def sin_cos_cut(x):
        if (x > 1):
            return 1
        elif (x < -1):
            return -1
        else:
            return x

    @staticmethod
    def degrees(angle):
        return ((angle * 180) / Math.PI)

    @staticmethod
    def radians(angle):
        return ((angle / 180) * Math.PI)

    @staticmethod
    def angle_quadrant(angle,rad = None):
        if (rad is None):
            rad = False
        k = 4
        if rad:
            angle = ((angle * 180) / Math.PI)
        x = HxOverrides.modf(angle, 360)
        if (x > 270):
            k = 4
        elif (x > 180):
            k = 3
        elif (x > 90):
            k = 2
        elif (x > 0):
            k = 1
        elif (x <= -270):
            k = 1
        elif (x <= -180):
            k = 2
        elif (x <= -90):
            k = 3
        elif (x <= 0):
            k = 4
        return k

    @staticmethod
    def steps_internal(xmin,xmax,n,borders = None):
        if (borders is None):
            borders = False
        rez = None
        if (n < 0):
            return rez
        st = (((xmax - xmin)) / ((n + 1)))
        if borders:
            _g = []
            _g1 = 0
            _g2 = (n + 2)
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append(((xmin + ((st * i))) if (((i > 0) and ((i < ((n + 1)))))) else (xmin if ((i == 0)) else xmax)))
            rez = _g
        else:
            _g3 = []
            _g11 = 1
            _g21 = (n + 1)
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g3.append((xmin + ((st * i1))))
            rez = _g3
        return rez

    @staticmethod
    def steps_external(smin,smax,n,direction):
        rez = None
        if (((n < 1) or ((direction < -1))) or ((direction > 1))):
            return rez
        st = (smax - smin)
        if (direction > 0):
            _g = []
            _g1 = 0
            _g2 = (n + 2)
            while (_g1 < _g2):
                i = _g1
                _g1 = (_g1 + 1)
                _g.append((smin + ((st * i))))
            rez = _g
        elif (direction < 0):
            full = (smin - ((st * n)))
            _g3 = []
            _g11 = 0
            _g21 = (n + 2)
            while (_g11 < _g21):
                i1 = _g11
                _g11 = (_g11 + 1)
                _g3.append((full + ((st * i1))))
            rez = _g3
        else:
            full1 = (smin - ((st * n)))
            _g4 = []
            _g12 = 0
            while (_g12 < 2):
                b = _g12
                _g12 = (_g12 + 1)
                _g13 = 0
                _g22 = (n + 2)
                while (_g13 < _g22):
                    i2 = _g13
                    _g13 = (_g13 + 1)
                    x = None
                    if (b == 0):
                        x = (full1 + ((st * i2)))
                    elif (i2 > 1):
                        x = (smin + ((st * i2)))
                    else:
                        continue
                    _g4.append(x)
            rez = _g4
        return rez

    @staticmethod
    def chain_indexes(a_l,n,ring):
        rez = None
        if ((n > a_l) or ((n < 1))):
            return rez
        ind = []
        _g = []
        _g1 = 0
        _g2 = a_l
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(i)
        indring = _g
        if ring:
            indring.append(0)
            _g3 = []
            _g4 = 0
            _g5 = None
            try:
                _g5 = int((((a_l + 1)) / ((n - 1))))
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                _g5 = None
            _g51 = (_g5 * ((n - 1)))
            while (_g4 < _g51):
                i1 = _g4
                _g4 = (_g4 + 1)
                x = None
                if ((HxOverrides.mod(i1, ((n - 1))) == 0) and ((((i1 + n) - 1) < ((a_l + 1))))):
                    x = i1
                else:
                    continue
                _g3.append(x)
            ind = _g3
        else:
            _g31 = []
            _g41 = 0
            _g52 = None
            try:
                _g52 = int((a_l / ((n - 1))))
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e1 = _hx_e1
                _g52 = None
            _g53 = (_g52 * ((n - 1)))
            while (_g41 < _g53):
                i2 = _g41
                _g41 = (_g41 + 1)
                x1 = None
                if ((HxOverrides.mod(i2, ((n - 1))) == 0) and ((((i2 + n) - 1) < a_l))):
                    x1 = i2
                else:
                    continue
                _g31.append(x1)
            ind = _g31
        _g32 = []
        _g42 = 0
        _g54 = len(ind)
        while (_g42 < _g54):
            i3 = _g42
            _g42 = (_g42 + 1)
            _g43 = []
            _g55 = 0
            _g6 = n
            while (_g55 < _g6):
                j = _g55
                _g55 = (_g55 + 1)
                _g43.append(python_internal_ArrayImpl._get(indring, ((ind[i3] if i3 >= 0 and i3 < len(ind) else None) + j)))
            _g32.append(_g43)
        rez = _g32
        return rez


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            pass
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g3 = 0
                    _g12 = l1
                    while (_g3 < _g12):
                        i1 = _g3
                        _g3 = (_g3 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1(o2.params[i1],s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        if isinstance(o,str):
            field1 = field
            _hx_local_0 = len(field1)
            if (_hx_local_0 == 10):
                if (field1 == "charCodeAt"):
                    return python_internal_MethodClosure(o,HxString.charCodeAt)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 11):
                if (field1 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,HxString.lastIndexOf)
                elif (field1 == "toLowerCase"):
                    return python_internal_MethodClosure(o,HxString.toLowerCase)
                elif (field1 == "toUpperCase"):
                    return python_internal_MethodClosure(o,HxString.toUpperCase)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 9):
                if (field1 == "substring"):
                    return python_internal_MethodClosure(o,HxString.substring)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 5):
                if (field1 == "split"):
                    return python_internal_MethodClosure(o,HxString.split)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 7):
                if (field1 == "indexOf"):
                    return python_internal_MethodClosure(o,HxString.indexOf)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 8):
                if (field1 == "toString"):
                    return python_internal_MethodClosure(o,HxString.toString)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            elif (_hx_local_0 == 6):
                if (field1 == "charAt"):
                    return python_internal_MethodClosure(o,HxString.charAt)
                elif (field1 == "length"):
                    return len(o)
                elif (field1 == "substr"):
                    return python_internal_MethodClosure(o,HxString.substr)
                else:
                    field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field2) if (hasattr(o,field2)) else None)
            else:
                field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field2) if (hasattr(o,field2)) else None)
        elif isinstance(o,list):
            field3 = field
            _hx_local_1 = len(field3)
            if (_hx_local_1 == 11):
                if (field3 == "lastIndexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.lastIndexOf)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 4):
                if (field3 == "copy"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.copy)
                elif (field3 == "join"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.join)
                elif (field3 == "push"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.push)
                elif (field3 == "sort"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.sort)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 5):
                if (field3 == "shift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.shift)
                elif (field3 == "slice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.slice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 7):
                if (field3 == "indexOf"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.indexOf)
                elif (field3 == "reverse"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.reverse)
                elif (field3 == "unshift"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.unshift)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 3):
                if (field3 == "map"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.map)
                elif (field3 == "pop"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.pop)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 8):
                if (field3 == "iterator"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.iterator)
                elif (field3 == "toString"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.toString)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            elif (_hx_local_1 == 6):
                if (field3 == "concat"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.concat)
                elif (field3 == "filter"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.filter)
                elif (field3 == "insert"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.insert)
                elif (field3 == "length"):
                    return len(o)
                elif (field3 == "remove"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.remove)
                elif (field3 == "splice"):
                    return python_internal_MethodClosure(o,python_internal_ArrayImpl.splice)
                else:
                    field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                    return (getattr(o,field4) if (hasattr(o,field4)) else None)
            else:
                field4 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
                return (getattr(o,field4) if (hasattr(o,field4)) else None)
        else:
            field5 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
            return (getattr(o,field5) if (hasattr(o,field5)) else None)

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "copy", "iterator", "indexOf", "lastIndexOf", "join", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def copy(x):
        return list(x)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g = l
        _g1 = _hx_len
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            if HxOverrides.eq(a[i],x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if HxOverrides.eq(a[l],x):
                return l
        return -1

    @staticmethod
    def join(x,sep):
        return sep.join([python_Boot.toString1(x1,'') for x1 in x])

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        if (b == 0.0):
            return float('nan')
        elif (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mod(a,b):
        if (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

geometryxd_GeometryXD.main()
